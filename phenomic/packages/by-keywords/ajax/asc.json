{"hasPreviousPage":false,"hasNextPage":false,"list":[{"id":"unpublished/glennsl/refetch","filename":"unpublished%2Fglennsl%2Frefetch.json","type":"unpublished","name":"glennsl/refetch","version":"0.1.0","description":"","license":"MIT","keywords":["http","fetch","bucklescript","ajax"],"readme":"# refetch\n\nRefetch is a strongly typed and immutable API built on top of the `fetch` standard. It is also incomplete, highly experimental and prone to change.\n\n## Example\n\n```reason\n/* Simple GET */\nResync.(Refetch.(\n  get(\"http://httpbin.org/get\")\n  |> Future.flatMap(\n     fun | Response.Ok(_, response) => Response.text(response)\n         | _ => \"oops!\" |> Future.from)\n  |> Future.whenResolved(Js.log)\n));\n\n/* builder functions */\nResync.(Refetch.(\n  request(`POST, \"https://httpbin.org/post\")\n    |> Request.header(`ContentType(\"application/x-www-form-urlencoded; charset=UTF-8\"))\n    |> Request.payload(`String(\"title=foobar&body=bar&userId=1\"))\n  |> fetch\n    |> Future.flatMap(\n        fun | Response.Ok(_, response) => Response.text(response)\n            | Response.Error({ reason }, _) => Future.from(reason))\n    |> Future.whenResolved(Js.log)\n));\n\n/* labeled arguments */\nResync.(Refetch.(\n  request(`POST, \"https://httpbin.org/post\",\n    ~headers=[`ContentType(\"application/x-www-form-urlencoded; charset=UTF-8\")],\n    ~body=`String(\"title=foobar&body=bar&userId=1\"))\n  |> fetch\n    |> Future.flatMap(\n        fun | Response.Ok(_, response) => Response.text(response)\n            | Response.Error({ reason }, _) => Future.from(reason))\n    |> Future.whenResolved(Js.log)\n));\n```","analyzed":"2017-12-24T16:47:08.125Z","updated":"2017-12-24T16:47:08.125Z","stars":8,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/glennsl/refetch#readme","repositoryUrl":"https://github.com/glennsl/refetch","npmUrl":null,"issuesUrl":"https://github.com/glennsl/refetch/issues","docsUrl":null,"path":"packages/unpublished/glennsl/refetch"}]}