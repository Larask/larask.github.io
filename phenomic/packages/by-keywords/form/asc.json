{"hasPreviousPage":false,"hasNextPage":false,"list":[{"id":"unpublished/Astrocoders/reform","filename":"unpublished%2FAstrocoders%2Freform.json","type":"unpublished","name":"Astrocoders/reform","version":"2.0.5","description":"Reasonably making forms sound good again","author":"Gabriel R. Abreu <grsabreu@gmail.com>","license":"MIT","keywords":["form","react","bucklescript","reason"],"readme":"# ReForm.re\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/Astrocoders/reform.svg)](https://greenkeeper.io/)\n[![Build Status](https://travis-ci.org/Astrocoders/reform.svg?branch=master)](https://travis-ci.org/Astrocoders/reform)\n\nReasonably making forms sound good again\n\n## Usage\n\n```reason\nmodule SignInFormParams = {\n  type state = {\n    password: string,\n    email: string\n  };\n  type fields = [ | `password | `email ];\n  let handleChange = (action, state) =>\n    switch action {\n    | (`password, value) => {...state, password: value}\n    | (`email, value) => {...state, email: value}\n    };\n};\n\nmodule SignInForm = ReForm.Create(SignInFormParams);\n\nlet component = ReasonReact.statelessComponent(\"SignIn\");\n\nlet make = (~signInMutation, _children) => {\n  ...component,\n  render: (_) => {\n    let validate: SignInFormParams.state => option(string) = (values) => switch values {\n      | { password: \"12345\" } => Some(\"Sorry, can't do\")\n      | _ => None\n    };\n\n    <SignInForm\n      initialState={password: \"\", email: \"\"}\n      onSubmit=((values, ~setError, ~setSubmitting) => whatever(values, ~setError, ~setSubmitting))\n      validate\n    >\n      ...(\n        (~form, ~handleChange, ~handleSubmit) =>\n          <FormWrapper>\n            <ErrorWarn error=form.error/>\n            <FieldsWrapper>\n              <FormField\n                fieldType=FormField.TextField\n                value=form.values.email\n                placeholder=\"Email\"\n                style=fieldsStyle\n                placeholderTextColor=AppTheme.Colors.blackLight\n                /* handleChange signature is (fields, string) => unit, so you can use right away with RN and React Web.\n                ** Just make an abstraction above to not give it an event and just the value\n                */\n                onChangeText=handleChange(`email)\n              />\n              <FormField\n                fieldType=FormField.TextField\n                placeholder=\"Password\"\n                onChangeText=handleChange(`password)\n                value=form.values.password\n                style=fieldsStyle\n                placeholderTextColor=AppTheme.Colors.blackLight\n              />\n            </FieldsWrapper>\n            <RaisedButton text=\"Sign in\" onPress=handleSubmit/>\n            </FormWrapper>\n      )\n    </SignInForm>\n  }\n}\n```\n","analyzed":"2017-12-24T16:47:08.069Z","updated":"2017-12-24T16:47:08.069Z","stars":20,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/Astrocoders/reform#readme","repositoryUrl":"https://github.com/Astrocoders/reform","npmUrl":null,"issuesUrl":"https://github.com/Astrocoders/reform/issues","docsUrl":null,"path":"packages/unpublished/Astrocoders/reform"}]}