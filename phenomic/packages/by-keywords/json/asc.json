{"hasPreviousPage":false,"hasNextPage":false,"list":[{"id":"bs-json","filename":"bs-json.json","type":"published","name":"bs-json","version":"0.2.4","description":"Experimental JSON encode/decode library for BuckleScript.","author":"glennsl","license":"MIT","keywords":["json","bucklescript"],"analyzed":"2017-12-19T23:18:54.426Z","updated":"2017-12-19T23:18:54.426Z","stars":37,"score":0.6186530320152803,"quality":0.7398390067121974,"popularity":0.1334675926393613,"maintenance":0.9999647787938417,"homepageUrl":"https://github.com/reasonml-community/bs-json#readme","repositoryUrl":"https://github.com/reasonml-community/bs-json","npmUrl":"https://www.npmjs.com/package/bs-json","issuesUrl":"https://github.com/reasonml-community/bs-json/issues","docsUrl":null,"path":"packages/bs-json"},{"id":"bs-ocaml-protoc-json","filename":"bs-ocaml-protoc-json.json","type":"published","name":"bs-ocaml-protoc-json","version":"0.1.1","description":"Protobuf JSON runtime for BuckleScript","author":"Maxime Ransan","license":"MIT","keywords":["serialization","json","syntax","protobuf","bucklescript"],"analyzed":"2017-12-24T00:00:23.555Z","updated":"2017-12-24T00:00:23.555Z","stars":0,"score":0.5130524969827233,"quality":0.6496999649221961,"popularity":0.02392435073199027,"maintenance":0.8850542421424796,"homepageUrl":"https://github.com/mransan/bs-ocaml-protoc-json","repositoryUrl":"https://github.com/mransan/bs-ocaml-protoc-json","npmUrl":"https://www.npmjs.com/package/bs-ocaml-protoc-json","issuesUrl":"https://github.com/mransan/bs-ocaml-protoc-json/issues","docsUrl":null,"path":"packages/bs-ocaml-protoc-json"},{"id":"json-r","filename":"json-r.json","type":"published","name":"json-r","version":"2.3.0","description":"A BuckleScript lib for handling JSON in `Result` favor, written in [ReasonML](http://facebook.github.io/reason/).","author":"CHEN Xianan","license":"MIT","keywords":["json","bucklescript"],"analyzed":"2017-12-18T10:32:37.893Z","updated":"2017-12-18T10:32:37.893Z","stars":7,"score":0.6049850705439781,"quality":0.8124786531920637,"popularity":0.03233402942644605,"maintenance":0.9997844693917226,"homepageUrl":"https://github.com/cxa/JsonR","repositoryUrl":"https://github.com/cxa/JsonR","npmUrl":"https://www.npmjs.com/package/json-r","issuesUrl":"https://github.com/cxa/JsonR/issues","docsUrl":null,"path":"packages/json-r"},{"id":"unpublished/state-machine-systems/JsonCodec","filename":"unpublished%2Fstate-machine-systems%2FJsonCodec.json","type":"unpublished","name":"state-machine-systems/JsonCodec","version":"0.1.0","description":"","license":"Apache-2.0","keywords":["json","bucklescript","reason"],"readme":"# JsonCodec\n\n## JSON combinator library for BuckleScript/Reason\n\nUsing the magic of [pickler combinators](https://www.microsoft.com/en-us/research/wp-content/uploads/2004/01/picklercombinators.pdf), this library allows you to parse and serialize JSON structures in a declarative way, free of boilerplate.\n\nHere's a little example:\n\n```reason\nlet json = {js|\n{\n    \"name\": \"Great Pyramid of Giza\",\n    \"lat\": 29.979175,\n    \"lon\": 31.134358,\n    \"height\": 146.5\n}\n|js};\n\n/* Define a codec for the above object type */\nlet codec =\n  JsonCodec.(\n    object4\n      (field \"name\" string) (field \"lat\" number) (field \"long\" number) (field \"height\" number)\n  );\n\n/* Decoding */\nlet () =\n  switch (JsonCodec.decodeJson codec json) {\n  | Js.Result.Ok (name, lat, lon, height) =>\n    Printf.printf \"name='%s' location=%f,%f height=%f\\n\" name lat lon height\n  | Js.Result.Error error => Printf.printf \"Decoding error: %s\" error\n  };\n\n/* Encoding */\nlet encoded = JsonCodec.encodeJson codec (\"Machu Picchu\", -13.163333, -72.545556, 2430.0);\n\nlet () = Printf.printf \"JSON: %s\\n\" encoded;\n```\n\n\n&copy; 2017 State Machine Systems Ltd. [Apache Licence, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)","analyzed":"2017-12-24T16:47:08.130Z","updated":"2017-12-24T16:47:08.130Z","stars":7,"score":0,"quality":0,"popularity":0,"maintenance":0,"repositoryUrl":"https://github.com/state-machine-systems/JsonCodec","npmUrl":null,"docsUrl":null,"path":"packages/unpublished/state-machine-systems/JsonCodec"}]}