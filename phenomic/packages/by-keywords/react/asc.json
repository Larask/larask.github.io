{"hasPreviousPage":false,"hasNextPage":false,"list":[{"id":"bs-material-ui","filename":"bs-material-ui.json","type":"published","name":"bs-material-ui","version":"0.1.16","description":"Reason bindings for material-ui","author":"Jonathon Kelly","license":"MIT","keywords":["react","material design","react-component","material-ui","bucklescript"],"analyzed":"2017-12-23T02:09:43.731Z","updated":"2017-12-23T02:09:43.731Z","stars":9,"score":0.5285054866177621,"quality":0.5237859897020418,"popularity":0.06106055424066821,"maintenance":0.9999957020654733,"homepageUrl":"https://github.com/InsidersByte/bs-material-ui#readme","repositoryUrl":"https://github.com/InsidersByte/bs-material-ui","npmUrl":"https://www.npmjs.com/package/bs-material-ui","issuesUrl":"https://github.com/InsidersByte/bs-material-ui/issues","docsUrl":null,"path":"packages/bs-material-ui"},{"id":"bs-material-ui-icons","filename":"bs-material-ui-icons.json","type":"published","name":"bs-material-ui-icons","version":"0.1.5","description":"Reason bindings for material-ui-icons","author":"Jonathon Kelly","license":"MIT","keywords":["react","icons","material","react-component","material-ui","bucklescript","design"],"analyzed":"2017-12-22T07:19:40.160Z","updated":"2017-12-22T07:19:40.160Z","stars":1,"score":0.5183076649888043,"quality":0.5237859897020418,"popularity":0.032292907259712386,"maintenance":0.9996267158208356,"homepageUrl":"https://github.com/InsidersByte/bs-material-ui-icons#readme","repositoryUrl":"https://github.com/InsidersByte/bs-material-ui-icons","npmUrl":"https://www.npmjs.com/package/bs-material-ui-icons","issuesUrl":"https://github.com/InsidersByte/bs-material-ui-icons/issues","docsUrl":null,"path":"packages/bs-material-ui-icons"},{"id":"bs-react-fela","filename":"bs-react-fela.json","type":"published","name":"bs-react-fela","version":"0.2.0","description":"BuckleScript bindings for react-fela","author":"Alessandro Strada","license":"MIT","keywords":["react","fela","bucklescript","reason"],"analyzed":"2017-12-10T17:55:16.301Z","updated":"2017-12-10T17:55:16.301Z","stars":6,"score":0.4835684902420404,"quality":0.41167083833848434,"popularity":0.03438792261887421,"maintenance":0.9943756166396833,"homepageUrl":"https://github.com/astrada/bs-react-fela","repositoryUrl":"https://github.com/astrada/bs-react-fela","npmUrl":"https://www.npmjs.com/package/bs-react-fela","issuesUrl":"https://github.com/astrada/bs-react-fela/issues","docsUrl":null,"path":"packages/bs-react-fela"},{"id":"bs-react-intl","filename":"bs-react-intl.json","type":"published","name":"bs-react-intl","version":"0.0.1","description":"BuckleScript bindings to react-intl","author":"Alex Fedoseev","license":"MIT","keywords":["react","react-intl","ocaml","bucklescript","reason"],"analyzed":"2017-12-24T04:26:49.985Z","updated":"2017-12-24T04:26:49.985Z","stars":0,"score":0.43459712270329426,"quality":0.36615444738653175,"popularity":0.020697818652750156,"maintenance":0.9071615770253492,"homepageUrl":"https://github.com/alexfedoseev/bs-react-intl#readme","repositoryUrl":"https://github.com/alexfedoseev/bs-react-intl","npmUrl":"https://www.npmjs.com/package/bs-react-intl","issuesUrl":"https://github.com/alexfedoseev/bs-react-intl/issues","docsUrl":null,"path":"packages/bs-react-intl"},{"id":"re-classnames","filename":"re-classnames.json","type":"published","name":"re-classnames","version":"0.0.3","description":"Simple reimplementation of classnames in ReasonML","author":"Alex Fedoseev","license":"MIT","keywords":["reason-react","react","classnames","ocaml","bucklescript","reason"],"analyzed":"2017-12-20T03:32:51.127Z","updated":"2017-12-20T03:32:51.127Z","stars":3,"score":0.5866757411724892,"quality":0.7582138297588854,"popularity":0.03207534555030289,"maintenance":0.9942434894349077,"homepageUrl":"https://github.com/alexfedoseev/re-classnames#readme","repositoryUrl":"https://github.com/alexfedoseev/re-classnames","npmUrl":"https://www.npmjs.com/package/re-classnames","issuesUrl":"https://github.com/alexfedoseev/re-classnames/issues","docsUrl":null,"path":"packages/re-classnames"},{"id":"re-formality","filename":"re-formality.json","type":"published","name":"re-formality","version":"0.0.3","description":"Reasonable form validation tool for reason-react","author":"Alex Fedoseev","license":"MIT","keywords":["reason-react","react","ocaml","bucklescript","reason"],"analyzed":"2017-12-22T22:01:18.479Z","updated":"2017-12-22T22:01:18.479Z","stars":2,"score":0.4879410699803369,"quality":0.43004566138517225,"popularity":0.03118269421851564,"maintenance":0.9943240816808707,"homepageUrl":"https://github.com/alexfedoseev/re-formality#readme","repositoryUrl":"https://github.com/alexfedoseev/re-formality","npmUrl":"https://www.npmjs.com/package/re-formality","issuesUrl":"https://github.com/alexfedoseev/re-formality/issues","docsUrl":null,"path":"packages/re-formality"},{"id":"reason-apollo","filename":"reason-apollo.json","type":"published","name":"reason-apollo","version":"0.5.7","description":"Using Apollo client 2 with Reason","author":"Gr√©goire Van der Auwermeulen","license":"MIT","keywords":["react","graphql","reason","apollo"],"analyzed":"2017-12-19T22:45:06.498Z","updated":"2017-12-19T22:45:06.498Z","stars":48,"score":0.5087903396211474,"quality":0.41167083833848434,"popularity":0.10082596605600598,"maintenance":1,"homepageUrl":"https://github.com/apollographql/reason-apollo#readme","repositoryUrl":"https://github.com/apollographql/reason-apollo","npmUrl":"https://www.npmjs.com/package/reason-apollo","issuesUrl":"https://github.com/apollographql/reason-apollo/issues","docsUrl":null,"path":"packages/reason-apollo"},{"id":"unpublished/Astrocoders/bs-reason-apollo","filename":"unpublished%2FAstrocoders%2Fbs-reason-apollo.json","type":"unpublished","name":"Astrocoders/bs-reason-apollo","version":"1.0.0-beta.3","description":"Boilerplate for BuckleScript NPM package","author":"Gabriel R. Abreu <grsabreu@gmail.com>","license":"MIT","keywords":["react","graphql","bucklescript","reason","apollo"],"readme":"# bs-reason-apollo\n[![Build Status](https://travis-ci.org/Astrocoders/bs-reason-apollo.svg?branch=master)](https://travis-ci.org/Astrocoders/bs-reason-apollo)\n\nInitially inspired by https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re\nBut now with a more sugared usage with function as child.\n\n\n## Difference from reason-apollo official\nThis allows you to use a React Apollo Client that you already have in JS so you can gradually change to Reason.\nSetup the same way you would do for React Apollo and just plug it in.\n\n## Install\n\n```\nyarn add bs-reason-apollo\n```\n\nUpdate your bs-config.json\n```js\n  \"bs-dependencies\": [\"reason-react\", \"bs-reform\", \"bs-reason-apollo\"],\n```\n\n## ReactApollo.CreateWrapper\nAs you have your ApolloProvider somewhere in the top of your React JS tree you are already covered there.\nSo now to use it with Apollo create a query definition module for you query:\n\n```reason\n/* re/SignInQueryGql.re */\nopen BsReasonApollo;\n\nlet query = GraphQLTag.gql({|\n  query SignInQuery {\n    currentUser {\n      id\n      email\n    }\n  }\n|});\n\nmodule Types = {\n  type user = {. \"id\": string, \"email\": string};\n  type error = {. \"message\": string};\n  /* You must always have this data type with loading and error, it's what the HOC gives you */\n  type data = {\n    .\n    \"loading\": Js.boolean,\n    \"error\": Js.null_undefined(error),\n    /* Our response */\n    \"currentUser\": Js.null_undefined(user)\n  };\n};\n\ntype data = Types.data;\n\n/* Define any Js.t variables that you query need here, if you don't use just declare it */\ntype variables;\n\ntype response = Types.user;\n```\n\nNow in your actually component:\n\n```reason\nopen BsReasonApollo;\n\nmodule SignInQueryWrapper = ReactApollo.CreateWrapper(SignInQueryGql);\n\n...\nlet make = (_children) => {\n  ...,\n  render: (_self) =>\n    <SignInQueryWrapper>\n    ...((~data) =>\n        switch (\n          Js.to_bool(data##loading),\n          Js.Null_undefined.to_opt(data##error),\n          Js.Null_undefined.to_opt(data##currentUser)\n        ) {\n        | (true, _, _) => <FullLoading />\n        | (false, _, Some(user)) =>\n          <Welcome user />\n        | (false, Some(error), _) => <Whoops name=error##message />\n        | (false, None, _) =>\n          <KeyboardAwareScrollView>\n            <Wrapper>\n              <Header>\n                <Logo\n                  source=Image.(\n                           Required(Packager.require(\"../../../src/public/img/logo-calendar.png\"))\n                         )\n                />\n              </Header>\n              <ContentWrapper\n                contentContainerStyle=Style.(\n                                        style([\n                                          paddingVertical(Pt(40.)),\n                                          justifyContent(SpaceAround)\n                                        ])\n                                      )>\n                <SignInForm />\n              </ContentWrapper>\n            </Wrapper>\n          </KeyboardAwareScrollView>\n        }\n      )\n    </SignInQueryWrapper>\n}\n```\n\n## ReactApollo.CreateMutationWrapper\n\nDefine the mutation module:\n\n```reason\n/* re/SignInMutationGql.re */\nopen BsReasonApollo;\n\nlet query = GraphQLTag.gql({|\n  mutation SignInQuery($input: SignInInput!) {\n    signIn(input: $input) {\n      error\n      token\n    }\n  }\n|});\n\nmodule Types = {\n  type input = {. \"password\": string, \"email\": string};\n  type signIn = {. \"error\": Js.null_undefined(string), \"token\": Js.null_undefined(string)};\n};\n\n/* Needed for mutations, it'll be probably `variables` in the next release */\ntype input = Types.input;\n\n/* Mutation response */\ntype response = {. \"signIn\": Types.signIn};\n```\n\n```reason\nopen BsReasonApollo;\n\n/* Mutation wrapper */\nmodule SignInMutationWrapper = ReactApollo.CreateMutationWrapper(SignInQueryGql);\n\n/* https://github.com/Astrocoders/reform */\nmodule SignInForm = ReForm.Create(SignInFormParams);\n\nlet convertInputToJs: SignInFormParams.state => SignInMutationGql.Types.signInInput =\n  (values) => {\"password\": values.password, \"email\": values.email};\n\nlet handleSubmit = (mutate, values, setSubmitting) =>\n  values\n  |> convertToJs\n  |> mutate\n  |> Js.Promise.(\n       then_(\n         (payload) =>\n           (\n             switch (Js.Null_undefined.to_opt(payload##signIn##error)) {\n             | Some(error) =>\n               Alert.alert(~title=\"Something went wrong\", ~message=error, ());\n               setSubmitting(false)\n             | None =>\n               RouterActions.home(~actionType=`replace);\n               let _ =\n                 Utils.UserSession.setToken(\n                   Utils.get(Js.Null_undefined.to_opt(payload##signIn##token), \"\")\n                 );\n               ignore()\n             }\n           )\n           |> resolve\n       )\n     )\n  |> ignore;\n\n/* A little abstraction to make function as child composition hurt a bit less */\nlet enhanced = (mapper) => {\n  <SignInMutationWrapper>\n    ...((~mutate) => (\n      <SignInForm\n        initialValues={etc}\n         onSubmit=(\n           (values, ~setSubmitting, ~setError as _) =>\n             handleSubmit(mutate, values, setSubmitting)\n         )\n      >\n        ...mapper\n      </SignInForm>\n    ))\n  </SignInMutationWrapper>\n};\n\nlet component =\n```\n\n## Demo\nWIP\n","analyzed":"2017-12-24T16:47:08.123Z","updated":"2017-12-24T16:47:08.123Z","stars":11,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/Astrocoders/bs-reason-apollo#readme","repositoryUrl":"https://github.com/Astrocoders/bs-reason-apollo","npmUrl":null,"issuesUrl":"https://github.com/Astrocoders/bs-reason-apollo/issues","docsUrl":null,"path":"packages/unpublished/Astrocoders/bs-reason-apollo"},{"id":"unpublished/Astrocoders/reform","filename":"unpublished%2FAstrocoders%2Freform.json","type":"unpublished","name":"Astrocoders/reform","version":"2.0.5","description":"Reasonably making forms sound good again","author":"Gabriel R. Abreu <grsabreu@gmail.com>","license":"MIT","keywords":["form","react","bucklescript","reason"],"readme":"# ReForm.re\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/Astrocoders/reform.svg)](https://greenkeeper.io/)\n[![Build Status](https://travis-ci.org/Astrocoders/reform.svg?branch=master)](https://travis-ci.org/Astrocoders/reform)\n\nReasonably making forms sound good again\n\n## Usage\n\n```reason\nmodule SignInFormParams = {\n  type state = {\n    password: string,\n    email: string\n  };\n  type fields = [ | `password | `email ];\n  let handleChange = (action, state) =>\n    switch action {\n    | (`password, value) => {...state, password: value}\n    | (`email, value) => {...state, email: value}\n    };\n};\n\nmodule SignInForm = ReForm.Create(SignInFormParams);\n\nlet component = ReasonReact.statelessComponent(\"SignIn\");\n\nlet make = (~signInMutation, _children) => {\n  ...component,\n  render: (_) => {\n    let validate: SignInFormParams.state => option(string) = (values) => switch values {\n      | { password: \"12345\" } => Some(\"Sorry, can't do\")\n      | _ => None\n    };\n\n    <SignInForm\n      initialState={password: \"\", email: \"\"}\n      onSubmit=((values, ~setError, ~setSubmitting) => whatever(values, ~setError, ~setSubmitting))\n      validate\n    >\n      ...(\n        (~form, ~handleChange, ~handleSubmit) =>\n          <FormWrapper>\n            <ErrorWarn error=form.error/>\n            <FieldsWrapper>\n              <FormField\n                fieldType=FormField.TextField\n                value=form.values.email\n                placeholder=\"Email\"\n                style=fieldsStyle\n                placeholderTextColor=AppTheme.Colors.blackLight\n                /* handleChange signature is (fields, string) => unit, so you can use right away with RN and React Web.\n                ** Just make an abstraction above to not give it an event and just the value\n                */\n                onChangeText=handleChange(`email)\n              />\n              <FormField\n                fieldType=FormField.TextField\n                placeholder=\"Password\"\n                onChangeText=handleChange(`password)\n                value=form.values.password\n                style=fieldsStyle\n                placeholderTextColor=AppTheme.Colors.blackLight\n              />\n            </FieldsWrapper>\n            <RaisedButton text=\"Sign in\" onPress=handleSubmit/>\n            </FormWrapper>\n      )\n    </SignInForm>\n  }\n}\n```\n","analyzed":"2017-12-24T16:47:08.069Z","updated":"2017-12-24T16:47:08.069Z","stars":20,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/Astrocoders/reform#readme","repositoryUrl":"https://github.com/Astrocoders/reform","npmUrl":null,"issuesUrl":"https://github.com/Astrocoders/reform/issues","docsUrl":null,"path":"packages/unpublished/Astrocoders/reform"},{"id":"unpublished/Astrocoders/restyled","filename":"unpublished%2FAstrocoders%2Frestyled.json","type":"unpublished","name":"Astrocoders/restyled","version":"1.0.1","description":"Boilerplate for BuckleScript NPM package","author":"Gabriel R. Abreu <grsabreu@gmail.com>","license":"MIT","keywords":["css","react","bucklescript","reason","css-in-js"],"readme":"# bs-restyled\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/Astrocoders/restyled.svg)](https://greenkeeper.io/)\n[![Build Status](https://travis-ci.org/Astrocoders/restyled.svg?branch=master)](https://travis-ci.org/Astrocoders/restyled)\n\nStyled Components concept for Reason\n\n## Install\n\n* `yarn add bs-styled`\n* Then add it to your bs-dependencies\n\n```js\n{\n  \"name\": \"myapp\",\n  \"reason\": {\n    \"react-jsx\": 2\n  },\n  \"bs-dependencies\": [\n    \"bs-react-native\",\n    \"reason-react\",\n    \"bs-restyled\"\n  ],\n  \"bsc-flags\": [\"-bs-super-errors\"],\n}\n```\n\n## Usage\n\n```ml\nmodule Wrapper = Styled.View {\n  type styleParams = unit;\n  let style (_) => Style.(style([flex(1), flexDirection(`column), justifyContent(`center)]));\n};\n\nlet component = ReasonReact.statelessComponent(\"MyView\");\n\nlet make = (_children) => {\n  ...component,\n  render: (_self) =>\n    <Wrapper>\n      ...anything else...\n    </Wrapper>\n}\n```\n\nTake a look in the [REStyled.re](https://github.com/Astrocoders/restyled/blob/master/re/REStyled.re) for more\n\n### Acknowledgments\n\nThanks everyone in Reason Discord for pointing me\ndirections and specially to Jared who proposed this\nusage to me here https://gist.github.com/jaredly/a5e0102c060b7a1b40525d41f87843a8\n","analyzed":"2017-12-24T16:47:08.130Z","updated":"2017-12-24T16:47:08.130Z","stars":18,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/Astrocoders/restyled#readme","repositoryUrl":"https://github.com/Astrocoders/restyled","npmUrl":null,"issuesUrl":"https://github.com/Astrocoders/restyled/issues","docsUrl":null,"path":"packages/unpublished/Astrocoders/restyled"}]}