{"filename":"bs-css.json","type":"published","id":"bs-css","name":"bs-css","version":"5.2.0","description":"BuckleScript bindings for glamor","author":"Jan Poeschko","license":"ISC","keywords":["css","glamor","bucklescript","reason"],"analyzed":"2017-12-21T21:10:32.010Z","updated":"2017-12-21T21:10:32.010Z","stars":48,"score":0.5409310823896777,"quality":0.5399585366387434,"popularity":0.08269816498713677,"maintenance":0.9999976104358768,"homepageUrl":"https://github.com/SentiaAnalytics/bs-css#readme","repositoryUrl":"https://github.com/SentiaAnalytics/bs-css","npmUrl":"https://www.npmjs.com/package/bs-css","issuesUrl":"https://github.com/SentiaAnalytics/bs-css/issues","docsUrl":null,"path":"packages/bs-css","body":"<h1 id=\"bs-css\"><a aria-hidden=\"true\" href=\"#bs-css\"><span class=\"icon icon-link\"></span></a>bs-css</h1>\n<p>statically typed DSL for writing css in reason.</p>\n<p>Bs-css is a statically typed interface to <a href=\"https://github.com/threepointone/glamor\">Glamor</a></p>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install --save bs-css</code></pre>\n<p>In your <code>bsconfig.json</code>, include <code>\"bs-css\"</code> in the <code>bs-dependencies</code>.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<pre><code class=\"hljs language-reason\">module <span class=\"hljs-attr\">Theme</span> = {\n  open Css;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">textColor</span> = hex(<span class=\"hljs-string\">\"333\"</span>);\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">basePadding</span> = px(<span class=\"hljs-number\">15</span>);\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">styles</span> = Css.({\n  <span class=\"hljs-string\">\"card\"</span>: style([\n    backgroundColor(white),\n    boxShadow(~<span class=\"hljs-attr\">y=3,</span> ~<span class=\"hljs-attr\">blur=5,</span> rgba(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.3</span>)),\n    padding(Theme.basePadding)\n  ]),\n  <span class=\"hljs-string\">\"title\"</span>: style([\n    fontSize(rem(<span class=\"hljs-number\">1.5</span>)),\n    color(Theme.textColor),\n    marginBottom(Theme.basePadding)\n  ])\n});\n\n&#x3C;div <span class=\"hljs-attr\">className=styles##card></span>\n  &#x3C;h1 <span class=\"hljs-attr\">className=styles##title></span> (ReasonReact.stringToElement(<span class=\"hljs-string\">\"Hello\"</span>)) &#x3C;/h1>\n&#x3C;/div></code></pre>\n<p><strong>Merging css rules</strong></p>\n<p>You can merge css rules using <code>merge</code></p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-built_in\">let</span> text_primary = <span class=\"hljs-built_in\">style</span>([ <span class=\"hljs-built_in\">color</span>(white) ]);\n<span class=\"hljs-built_in\">let</span> small = <span class=\"hljs-built_in\">style</span>([ fontSize(px(<span class=\"hljs-number\">10</span>)) ]);\n\n\n&#x3C;p className=merge([ text_primary, small ])> ...</code></pre>\n<p>bs-css will make sure that rules are merged in the correct order, managing nesting and precedence for you.</p>\n<p><strong>Global css</strong></p>\n<p> You can defined global css rules with <code>global</code></p>\n<pre><code class=\"hljs language-reason\">Css.(\n  global(<span class=\"hljs-string\">\"body\"</span>, [margin(px(<span class=\"hljs-number\">0</span>))])\n);\n\nCss.(\n  global(<span class=\"hljs-string\">\"h1, h2, h3\"</span>, [color(rgb(<span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">33</span>))])\n);</code></pre>\n<p><strong>Keyframes</strong></p>\n<p>define animation keyframes;</p>\n<pre><code class=\"hljs language-reason\">let bounce = Css.keyframes([\n  (<span class=\"hljs-string\">\"0%\"</span>, [ transform( scale(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.1</span>) ),  opacity(<span class=\"hljs-number\">0.0</span>) ]),\n  (<span class=\"hljs-string\">\"60%\"</span>, [ transform( scale(<span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">1.2</span>) ),  opacity(<span class=\"hljs-number\">1.0</span>) ]),\n  (<span class=\"hljs-string\">\"100%\"</span>, [ transform( scale(<span class=\"hljs-number\">1.0</span>,<span class=\"hljs-number\">1.0</span>) ), opacity(<span class=\"hljs-number\">1.0</span>) ])\n]);\n\nlet styles = css([\n  animationName(bounce),\n  animationDuration(<span class=\"hljs-number\">2000</span>),\n  width(px(<span class=\"hljs-number\">50</span>)),\n  height(px(<span class=\"hljs-number\">50</span>)),\n  backgroundColor(rgb(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))\n]);\n\n<span class=\"hljs-comment\">// ...</span>\n&#x3C;div className=styles>\n  (ReasonReact.stringToElement(<span class=\"hljs-string\">\"bounce!\"</span>))\n&#x3C;/div></code></pre>\n<h2 id=\"development\"><a aria-hidden=\"true\" href=\"#development\"><span class=\"icon icon-link\"></span></a>Development</h2>\n<pre><code class=\"hljs language-sh\">npm run start</code></pre>\n<h2 id=\"where-is-the-documentation\"><a aria-hidden=\"true\" href=\"#where-is-the-documentation\"><span class=\"icon icon-link\"></span></a>Where is the documentation?</h2>\n<p>Its on its way!\nuntil then you can check out <a href=\"./src/Css.rei\">css.rei</a>.</p>\n<h2 id=\"thanks\"><a aria-hidden=\"true\" href=\"#thanks\"><span class=\"icon icon-link\"></span></a>Thanks</h2>\n<p>Thanks to <a href=\"https://github.com/threepointone/glamor\">glamor</a> which is doing all the heavi lifting.\nThanks to <a href=\"https://github.com/poeschko/bs-glamor\">bs-glamor</a> which this repo was forked from.\nThanks to <a href=\"https://github.com/rtfeldman/elm-css\">elm-css</a> for dsl design inspiration.</p>"}