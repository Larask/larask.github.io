{"filename":"bs-dataloader.json","type":"published","id":"bs-dataloader","name":"bs-dataloader","version":"0.3.0","description":"This is a rewrite in reasonml of https://github.com/facebook/dataloader/blob/master/src/index.js","license":"MIT","keywords":["dataloader","bucklescript"],"analyzed":"2017-12-13T12:52:38.966Z","updated":"2017-12-13T12:52:38.966Z","stars":17,"score":0.5890353186584185,"quality":0.7398390067121974,"popularity":0.04997848549061599,"maintenance":0.9988318477801248,"homepageUrl":"https://github.com/ulrikstrid/bs-dataloader#readme","repositoryUrl":"https://github.com/ulrikstrid/bs-dataloader","npmUrl":"https://www.npmjs.com/package/bs-dataloader","issuesUrl":"https://github.com/ulrikstrid/bs-dataloader/issues","docsUrl":null,"path":"packages/bs-dataloader","body":"<h1 id=\"bs-dataloader\"><a aria-hidden=\"true\" href=\"#bs-dataloader\"><span class=\"icon icon-link\"></span></a>bs-dataloader</h1>\n<p><a href=\"https://circleci.com/gh/ulrikstrid/bs-dataloader\"><img src=\"https://circleci.com/gh/ulrikstrid/bs-dataloader.svg?style=svg\" alt=\"CircleCI\"></a></p>\n<p>This is a rewrite of <a href=\"https://github.com/facebook/dataloader\">dataloader js lib</a> in reasonml for use with BuckleScript. I have a goal to make it work with native OCaml in the future but I still rely on some JavaScript structures.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<pre><code class=\"hljs language-re\">module UserLoaderImpl = {\n  type value = user;\n  type key = userId;\n  <span class=\"hljs-comment\">/* The batchLoadFun needs to wrap the returned values in Js.Result.t so that we can reject each promise instead of all */</span>\n  let batchLoadFun userIds => batchGetUsers userIds;\n  let options: options = {batch: <span class=\"hljs-literal\">true</span>, maxBatchSize: <span class=\"hljs-number\">256</span>, cache: <span class=\"hljs-literal\">true</span>};\n};\n\nmodule UserLoader = DataLoader.Make UserLoaderImpl;\n\nUserLoader.load <span class=\"hljs-string\">\"1\"</span>\n|> Js.Promise.then_ (\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> user => displayUser user;</span>\n  Js.Promise.resolve ()\n);\n\n<span class=\"hljs-comment\">/* elsewhere in your app */</span>\n\nUserLoader.load <span class=\"hljs-string\">\"2\"</span>\n|> Js.Promise.then_ (\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> user => interactWithUser user;</span>\n  Js.Promsie.resolve()\n);</code></pre>\n<p>The example above will load both users at the same time with 1 request.\nIf we later need one of the loaded users again we will get a cached version of the promise, if you need a new version from the server you can clear the key.</p>\n<pre><code class=\"hljs language-re\">updateUser ::userId ::userPatch\n|> Js.Promise.then_ (fun _ => Js.Promise.resolve (UserLoader.clear userId))\n|> Js.Promise.then_ (fun _ => UserLoader.load <span class=\"hljs-string\">\"1\"</span>)\n|> Js.Promise.then_ (\n  fun<span class=\"hljs-built_in\"> user </span>=> displayUser<span class=\"hljs-built_in\"> user;\n</span>  Js.Promise.resolve ()\n)</code></pre>\n<h2 id=\"development\"><a aria-hidden=\"true\" href=\"#development\"><span class=\"icon icon-link\"></span></a>Development</h2>\n<h3 id=\"build\"><a aria-hidden=\"true\" href=\"#build\"><span class=\"icon icon-link\"></span></a>Build</h3>\n<pre><code>npm run build\n</code></pre>\n<h3 id=\"build--watch\"><a aria-hidden=\"true\" href=\"#build--watch\"><span class=\"icon icon-link\"></span></a>Build + Watch</h3>\n<pre><code>npm run watch\n</code></pre>\n<h3 id=\"test\"><a aria-hidden=\"true\" href=\"#test\"><span class=\"icon icon-link\"></span></a>Test</h3>\n<pre><code>npm run test\n</code></pre>\n<h3 id=\"editor\"><a aria-hidden=\"true\" href=\"#editor\"><span class=\"icon icon-link\"></span></a>Editor</h3>\n<p>If you use <code>vscode</code>, Press <code>Windows + Shift + B</code> it will build automatically</p>"}