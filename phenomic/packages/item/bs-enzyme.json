{"filename":"bs-enzyme.json","type":"published","id":"bs-enzyme","name":"bs-enzyme","version":"0.3.0","description":"Bucklescript bindings for Enzyme","author":"Rhys Powell","license":"MIT","keywords":["bucklescript","testing","enzyme"],"analyzed":"2017-12-15T17:31:18.968Z","updated":"2017-12-15T17:31:18.968Z","stars":15,"score":0.6032854205957334,"quality":0.7844486647188749,"popularity":0.05134452467111535,"maintenance":0.999943535843373,"homepageUrl":"https://github.com/rpowelll/bs-enzyme#readme","repositoryUrl":"https://github.com/rpowelll/bs-enzyme","npmUrl":"https://www.npmjs.com/package/bs-enzyme","issuesUrl":"https://github.com/rpowelll/bs-enzyme/issues","docsUrl":null,"path":"packages/bs-enzyme","body":"<h1 id=\"bs-enzyme---bucklescript-bindings-for-enzyme\"><a aria-hidden=\"true\" href=\"#bs-enzyme---bucklescript-bindings-for-enzyme\"><span class=\"icon icon-link\"></span></a>bs-enzyme - <a href=\"https://github.com/bucklescript/bucklescript\">BuckleScript</a> bindings for <a href=\"https://github.com/airbnb/enzyme\">Enzyme</a> <a href=\"https://www.npmjs.com/package/bs-enzyme\"><img src=\"https://img.shields.io/npm/v/bs-enzyme.svg?style=flat-square\" alt=\"npm (scoped)\"></a></h1>\n<p>:construction: <strong>Note:</strong> This package is still <em>very</em> experimental. Expect\nfrequent, breaking changes right up until 1.0 is released. :construction:</p>\n<hr>\n<h2 id=\"status\"><a aria-hidden=\"true\" href=\"#status\"><span class=\"icon icon-link\"></span></a>Status</h2>\n<ul>\n<li>Most of the <code>shallow</code> API is implemented</li>\n<li>The <code>simulate</code> method is currently wrapped in multiple <code>simulateN</code> functions\nto handle mixed variadic arguments</li>\n<li>Neither the <code>render</code> nor <code>mount</code> APIs are implemented</li>\n<li>I haven't extensively tested most of the functions, so some might be broken</li>\n</ul>\n<h2 id=\"example\"><a aria-hidden=\"true\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>Using the excellent <a href=\"https://github.com/reasonml-community/bs-jest\">bs-jest</a></p>\n<pre><code class=\"hljs language-reason\">open Jest;\n\nEnzyme.configureEnzyme(Enzyme.react_16_adapter());\n\n<span class=\"hljs-keyword\">let</span> setup = (~title=<span class=\"hljs-string\">\"Test\"</span>, ~handleClick=(_evt) => (), ()) =>\n  Enzyme.shallow(&#x3C;DummyComponent title handleClick />);\n\n<span class=\"hljs-keyword\">let</span> header = (wrapper) =>\nwrapper\n  |<span class=\"hljs-type\">> Enzyme</span>.find(<span class=\"hljs-string\">\"#header\"</span>)\n  |<span class=\"hljs-type\">> Enzyme</span>.<span class=\"hljs-built_in\">first</span>;\n\n<span class=\"hljs-keyword\">let</span> listItems = (wrapper) =>\n  wrapper\n  |<span class=\"hljs-type\">> Enzyme</span>.find(<span class=\"hljs-string\">\"#list\"</span>)\n  |<span class=\"hljs-type\">> Enzyme</span>.children;\n\ndescribe(<span class=\"hljs-string\">\"DummyComponent\"</span>, () => {\n  open Expect;\n\n  test(<span class=\"hljs-string\">\"renders a #header\"</span>, () => {\n    <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"A test title\"</span>;\n    <span class=\"hljs-keyword\">let</span> wrapper = setup(~title, ());\n    <span class=\"hljs-keyword\">let</span> headerNodes = wrapper |<span class=\"hljs-type\">> header</span>;\n    expect(Enzyme.length(headerNodes)) |<span class=\"hljs-type\">> toBe</span>(<span class=\"hljs-number\">1</span>)\n  });\n\n  test(<span class=\"hljs-string\">\"has the expected h1 tag in the #header\"</span>, () => {\n    <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"A test title\"</span>;\n    <span class=\"hljs-keyword\">let</span> wrapper = setup(~title, ());\n    <span class=\"hljs-keyword\">let</span> expectedNode = &#x3C;h1> (ReasonReact.stringToElement(title)) &#x3C;/h1>;\n    expect(Enzyme.contains(expectedNode, wrapper)) |<span class=\"hljs-type\">> toBe</span>(true)\n  });\n\n  test(<span class=\"hljs-string\">\"initially has its `clicked` state set to false\"</span>, () => {\n    <span class=\"hljs-keyword\">let</span> wrapper = setup();\n    <span class=\"hljs-keyword\">let</span> {clicked}: DummyComponent.state = Enzyme.state(wrapper);\n    expect(clicked) |<span class=\"hljs-type\">> toBe</span>(false)\n  });\n\n  test(<span class=\"hljs-string\">\"folds left properly\"</span>, () => {\n    <span class=\"hljs-keyword\">let</span> items = setup() |<span class=\"hljs-type\">> listItems</span>;\n    <span class=\"hljs-keyword\">let</span> result = Enzyme.foldLeft((text, node) => text ++ Enzyme.text(node), <span class=\"hljs-string\">\"\"</span>, items);\n    expect(result) |<span class=\"hljs-type\">> toBe</span>(<span class=\"hljs-string\">\"OneTwoThree\"</span>)\n  });\n});</code></pre>\n<p>See more examples in the project's\n<a href=\"https://github.com/rpowelll/bs-enzyme/tree/master/src/__tests__\">tests directory</a>.</p>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code>$ npm install --save-dev bs-enzyme\n</code></pre>\n<p>Then add <code>bs-enzyme</code> to <code>bs-dev-dependencies</code> in your <code>bsconfig.json</code>:</p>\n<pre><code class=\"hljs language-json\">{\n  ...\n  <span class=\"hljs-attr\">\"bs-dev-dependencies\"</span>: [<span class=\"hljs-string\">\"bs-enzyme\"</span>]\n}</code></pre>\n<p><strong>Note:</strong> If you're using this package with <code>bs-jest</code>, be sure to list\n<code>bs-enzyme</code> first in your dependencies.</p>"}