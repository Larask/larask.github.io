{"filename":"bs-glamor.json","type":"published","id":"bs-glamor","name":"bs-glamor","version":"0.1.3","description":"BuckleScript bindings for glamor","author":"Jan Poeschko","license":"ISC","keywords":["css","glamor","bucklescript","reason"],"analyzed":"2017-12-14T16:36:22.262Z","updated":"2017-12-14T16:36:22.262Z","stars":45,"score":0.6002183012277538,"quality":0.7447304008767317,"popularity":0.09108360245619977,"maintenance":0.9854854860144695,"homepageUrl":"https://github.com/poeschko/bs-glamor#readme","repositoryUrl":"https://github.com/poeschko/bs-glamor","npmUrl":"https://www.npmjs.com/package/bs-glamor","issuesUrl":"https://github.com/poeschko/bs-glamor/issues","docsUrl":null,"path":"packages/bs-glamor","body":"<h1 id=\"bs-glamor--bucklescript-bindings-for-glamor\"><a aria-hidden=\"true\" href=\"#bs-glamor--bucklescript-bindings-for-glamor\"><span class=\"icon icon-link\"></span></a>bs-glamor â€“ <a href=\"https://github.com/bloomberg/bucklescript\">BuckleScript</a> bindings for <a href=\"https://github.com/threepointone/glamor\">glamor</a></h1>\n<p>The API is still <strong>experimental</strong>. Only the <code>css</code> function from glamor is exposed (with its result slightly incorrectly typed as a <code>string</code>); no other functions such as <code>renderStatic</code> are supported yet.</p>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install --save bs-glamor</code></pre>\n<p>In your <code>bsconfig.json</code>, include <code>\"bs-glamor\"</code> in the <code>bs-dependencies</code>.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<p>The following examples (in <a href=\"https://facebook.github.io/reason\">Reason</a> syntax) assume that <code>Glamor</code> is included in the namespace:</p>\n<pre><code class=\"hljs language-reason\">open Glamor<span class=\"hljs-comment\">;</span></code></pre>\n<ul>\n<li>\n<p>Simple styling:</p>\n<pre><code class=\"hljs language-reason\">css [\n    <span class=\"hljs-built_in\">color</span> <span class=\"hljs-string\">\"red\"</span>,\n    <span class=\"hljs-built_in\">border</span> <span class=\"hljs-string\">\"1px solid black\"</span>\n]</code></pre>\n</li>\n<li>\n<p>Styling with selectors (<code>@media</code>, <code>:hover</code>, <code>&#x26;</code>, etc.):</p>\n<pre><code class=\"hljs language-reason\">css [\n    <span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"red\"</span>,\n    Selector <span class=\"hljs-string\">\"@media (min-width: 300px)\"</span> [\n        <span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"green\"</span>\n    ]\n]</code></pre>\n</li>\n<li>\n<p>Selectors can be nested:</p>\n<pre><code class=\"hljs language-reason\">css [\n    <span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"red\"</span>,\n    Selector <span class=\"hljs-string\">\"@media (min-width: 300px)\"</span> [\n        <span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"green\"</span>,\n        Selector <span class=\"hljs-string\">\"&#x26; .foo\"</span> [\n            <span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"blue\"</span>\n        ]\n    ]\n]</code></pre>\n</li>\n</ul>\n<p>You can isolate inclusion of the <code>Glamor</code> namespace in the following way:</p>\n<pre><code class=\"hljs language-reason\">Glamor.(css [<span class=\"hljs-keyword\">color</span> <span class=\"hljs-string\">\"red\"</span>])</code></pre>\n<p>The result of the <code>css</code> function can be assigned to a class name, e.g. in JSX:</p>\n<pre><code class=\"hljs language-reason\">&#x3C;<span class=\"hljs-selector-tag\">div</span> className=(css [<span class=\"hljs-attribute\">color</span> <span class=\"hljs-string\">\"red\"</span>]) /></code></pre>\n<h2 id=\"example\"><a aria-hidden=\"true\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>See <a href=\"https://github.com/poeschko/reason-react-tictactoe\">reason-react-tictactoe</a> for a live example.</p>\n<h2 id=\"development\"><a aria-hidden=\"true\" href=\"#development\"><span class=\"icon icon-link\"></span></a>Development</h2>\n<pre><code class=\"hljs language-sh\">npm run start</code></pre>\n<h3 id=\"tests\"><a aria-hidden=\"true\" href=\"#tests\"><span class=\"icon icon-link\"></span></a>Tests</h3>\n<p>There are some simplistic tests using <a href=\"https://github.com/BuckleTypes/bs-jest\">bs-jest</a>.</p>\n<pre><code class=\"hljs language-sh\">npm run <span class=\"hljs-built_in\">test</span></code></pre>\n<h2 id=\"thanks\"><a aria-hidden=\"true\" href=\"#thanks\"><span class=\"icon icon-link\"></span></a>Thanks</h2>\n<p>Thanks to <a href=\"https://github.com/chenglou/reason-react-example\">reason-react-example</a>, <a href=\"https://github.com/reasonml/reason-react\">reason-react</a>, and <a href=\"https://github.com/BuckleTypes/bs-jest\">bs-jest</a> for inspiration how to create a Reason library, and of course, thanks to <a href=\"https://github.com/threepointone/glamor\">glamor</a>.</p>"}