{"filename":"bs-jest.json","type":"published","id":"bs-jest","name":"bs-jest","version":"0.2.0","description":"BuckleScript bindings to the Jest testing framework","author":"glennsl","license":"MIT","keywords":["test","jest","bucklescript"],"analyzed":"2017-12-22T23:34:32.034Z","updated":"2017-12-22T23:34:32.034Z","stars":55,"score":0.5199543870901007,"quality":0.8155999818221106,"popularity":0.12643997926868442,"maintenance":0.6600582851412229,"homepageUrl":"https://github.com/reasonml-community/bs-jest#readme","repositoryUrl":"https://github.com/reasonml-community/bs-jest","npmUrl":"https://www.npmjs.com/package/bs-jest","issuesUrl":"https://github.com/reasonml-community/bs-jest/issues","docsUrl":null,"path":"packages/bs-jest","body":"<h1 id=\"bs-jest---bucklescript-bindings-for-jest\"><a aria-hidden=\"true\" href=\"#bs-jest---bucklescript-bindings-for-jest\"><span class=\"icon icon-link\"></span></a>bs-jest - <a href=\"https://github.com/bucklescript/bucklescript\">BuckleScript</a> bindings for <a href=\"https://github.com/facebook/jest\">Jest</a> <a href=\"https://travis-ci.org/reasonml-community/bs-jest\"><img src=\"https://travis-ci.org/reasonml-community/bs-jest.svg?branch=master\" alt=\"Build Status\"></a></h1>\n<p>Very very <strong>experimental</strong> (yep, that's one less \"very\" than before! Progress!) and <strong>WIP</strong></p>\n<h2 id=\"status\"><a aria-hidden=\"true\" href=\"#status\"><span class=\"icon icon-link\"></span></a>Status</h2>\n<ul>\n<li><a href=\"https://facebook.github.io/jest/docs/api.html#content\">Global</a>: Fully implemented and tested, apart from <code>require.*</code></li>\n<li><a href=\"https://facebook.github.io/jest/docs/expect.html#content\">Expect</a>: Mostly implemented. Functionality that makes sense only for JS interop have been moved to <code>ExpectJS</code>. Some functionality does not make sense in a typed language, or is not possible to implement sensibly in ML.</li>\n<li><a href=\"https://facebook.github.io/jest/docs/mock-function-api.html#content\">Mock Functions</a>: Experimental and unsafe implementation, very much in flux. The Jest bindings will most likely be relegated to the <code>MockJs</code> module as it's very quirky to use with native code. A separate native from-scratch implementation might suddenly appear as <code>Mock</code>.</li>\n<li><a href=\"https://facebook.github.io/jest/docs/jest-object.html#content\">The Jest Object</a>: Fake timers are fully implemented and tested. Mock functionality has been moved to <code>JestJs</code>. It's mostly implemented, but experimental and largely untested.</li>\n<li>[Snapshotting] Completely untested. Expect functions exist, but there's currently no way to implement custom snapshot serializers.</li>\n</ul>\n<h2 id=\"example\"><a aria-hidden=\"true\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<pre><code class=\"hljs language-ml\"><span class=\"hljs-comment\">(* OCaml *)</span>\n<span class=\"hljs-keyword\">open</span> <span class=\"hljs-type\">Jest</span>\n\n<span class=\"hljs-keyword\">let</span> _ =\n\ndescribe <span class=\"hljs-string\">\"Expect\"</span> (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-literal\">()</span> -> \n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">open</span> <span class=\"hljs-type\">Expect</span> <span class=\"hljs-keyword\">in</span>\n\n  test <span class=\"hljs-string\">\"toBe\"</span> (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-literal\">()</span> ->\n    expect (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) |> toBe <span class=\"hljs-number\">3</span>);\n);\n\ndescribe <span class=\"hljs-string\">\"Expect.Operators\"</span> (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-literal\">()</span> -> \n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">open</span> <span class=\"hljs-type\">Expect</span> <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">let</span> open! <span class=\"hljs-type\">Expect</span>.<span class=\"hljs-type\">Operators</span> <span class=\"hljs-keyword\">in</span>\n\n  test <span class=\"hljs-string\">\"==\"</span> (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-literal\">()</span> ->\n    expect (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">3</span>);\n);</code></pre>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* Reason */</span>\n<span class=\"hljs-keyword\">open</span> Jest;\n\nlet _ =\n\ndescribe <span class=\"hljs-string\">\"Expect\"</span> (<span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">()</span></span> => {\n  <span class=\"hljs-keyword\">open</span> Expect;\n\t\n  test <span class=\"hljs-string\">\"toBe\"</span> (<span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">()</span></span> =>\n    expect (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) |> toBe <span class=\"hljs-number\">3</span>)\n});\n    \ndescribe <span class=\"hljs-string\">\"Expect.Operators\"</span> (<span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">()</span></span> => {\n  <span class=\"hljs-keyword\">open</span> Expect;\n  <span class=\"hljs-keyword\">open</span>! Expect.Operators;\n  \n  test <span class=\"hljs-string\">\"==\"</span> (<span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">()</span></span> =>\n    expect (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) === <span class=\"hljs-number\">3</span>)\n});</code></pre>\n<p>See <a href=\"https://github.com/reasonml-community/bs-jest/tree/master/__tests__\">the tests</a> for more examples.</p>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install --save-dev bs-jest</code></pre>\n<p>Then add <code>bs-jest</code> to <code>bs-dev-dependencies</code> in your <code>bsconfig.json</code>:</p>\n<pre><code class=\"hljs language-js\">{\n  ...\n  <span class=\"hljs-string\">\"bs-dev-dependencies\"</span>: [<span class=\"hljs-string\">\"bs-jest\"</span>]\n}</code></pre>\n<p>Then add <code>__tests__</code> to <code>sources</code> in your <code>bsconfig.json</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"sources\"</span>: [\n  {\n    <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"src\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"__tests__\"</span>,\n    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"dev\"</span>\n  }\n]</code></pre>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<p>Put tests in a <code>__tests__</code> directory and use the suffix <code>*test.ml</code>/<code>*test.re</code> (Make sure to use valid module names. e.g. <code>&#x3C;name>_test.re</code> is valid while <code>&#x3C;name>.test.re</code> is not). When compiled they will be put in a <code>__tests__</code> directory under <code>lib</code>, with a <code>*test.js</code> suffix, ready to be picked up when you run <code>jest</code>. If you're not already familiar with <a href=\"https://github.com/facebook/jest\">Jest</a>, see <a href=\"https://facebook.github.io/jest/\">the Jest documentation</a>.</p>\n<h2 id=\"contribute\"><a aria-hidden=\"true\" href=\"#contribute\"><span class=\"icon icon-link\"></span></a>Contribute</h2>\n<pre><code class=\"hljs language-sh\">git <span class=\"hljs-built_in\">clone</span> https://github.com/reasonml-community/bs-jest.git\n<span class=\"hljs-built_in\">cd</span> bs-jest\nnpm install</code></pre>\n<p>Then build and run tests with <code>npm test</code>, start watchers for <code>bsb</code>and <code>jest</code> with <code>npm run watch:bsb</code> and <code>npm run watch:jest</code> respectively. Install <code>screen</code> to be able to use <code>npm run watch:screen</code> to run both watchers in a single terminal window.</p>\n<h2 id=\"changes\"><a aria-hidden=\"true\" href=\"#changes\"><span class=\"icon icon-link\"></span></a>Changes</h2>\n<h3 id=\"020\"><a aria-hidden=\"true\" href=\"#020\"><span class=\"icon icon-link\"></span></a>0.2.0</h3>\n<ul>\n<li>Removed deprecations</li>\n<li>Added <code>testAll</code>, <code>Only.testAll</code>, <code>Skip.testAll</code> that generates tests from a list of inputs</li>\n<li>Fixed type signature of <code>fail</code></li>\n<li>Added <code>expectFn</code></li>\n</ul>"}