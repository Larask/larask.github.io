{"filename":"bs-json.json","type":"published","id":"bs-json","name":"bs-json","version":"0.2.4","description":"Experimental JSON encode/decode library for BuckleScript.","author":"glennsl","license":"MIT","keywords":["json","bucklescript"],"analyzed":"2017-12-19T23:18:54.426Z","updated":"2017-12-19T23:18:54.426Z","stars":37,"score":0.6186530320152803,"quality":0.7398390067121974,"popularity":0.1334675926393613,"maintenance":0.9999647787938417,"homepageUrl":"https://github.com/reasonml-community/bs-json#readme","repositoryUrl":"https://github.com/reasonml-community/bs-json","npmUrl":"https://www.npmjs.com/package/bs-json","issuesUrl":"https://github.com/reasonml-community/bs-json/issues","docsUrl":null,"path":"packages/bs-json","body":"<h1 id=\"bs-json\"><a aria-hidden=\"true\" href=\"#bs-json\"><span class=\"icon icon-link\"></span></a>bs-json</h1>\n<p>Experimental JSON encode/decode library for BuckleScript.</p>\n<p>The Decode module in particular provides a basic set of decoder functions to be composed into more complex decoders. A decoder is a function that takes a <code>Js.Json.t</code> and either returns a value of the desired type if successful or raises a <code>DecodeError</code> exception if not. Other functions accept a decoder and produce another decoder. Like <code>array</code>, which when given a decoder for type <code>t</code> will return a decoder that tries to produce a value of type <code>t array</code>. So to decode an <code>int array</code> you combine <code>Json.Decode.int</code> with <code>Json.Decode.array</code> into <code>Json.Decode.(array int)</code>. An array of arrays of ints? <code>Json.Deocde.(array (array int))</code>. Dict containing arrays of ints? <code>Json.Decode.(dict (array int))</code>.</p>\n<h2 id=\"example\"><a aria-hidden=\"true\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<pre><code class=\"hljs language-ml\"><span class=\"hljs-comment\">(* OCaml *)</span>\n<span class=\"hljs-keyword\">type</span> line = {\n  start: point;\n  end_: point;\n  thickness: <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">option</span>\n}\n<span class=\"hljs-keyword\">and</span> point = {\n  x: float;\n  y: float\n}\n\nmodule <span class=\"hljs-type\">Decode</span> = <span class=\"hljs-keyword\">struct</span>\n  <span class=\"hljs-keyword\">let</span> point json =\n    <span class=\"hljs-keyword\">let</span> open! <span class=\"hljs-type\">Json</span>.<span class=\"hljs-type\">Decode</span> <span class=\"hljs-keyword\">in</span> {\n      x = json |> field <span class=\"hljs-string\">\"x\"</span> float;\n      y = json |> field <span class=\"hljs-string\">\"y\"</span> float\n    }\n\n  <span class=\"hljs-keyword\">let</span> line json =\n    <span class=\"hljs-type\">Json</span>.<span class=\"hljs-type\">Decode</span>.{\n      start     = json |> field <span class=\"hljs-string\">\"start\"</span> point;\n      end_      = json |> field <span class=\"hljs-string\">\"end\"</span> point;\n      thickness = json |> optional (field <span class=\"hljs-string\">\"thickness\"</span> <span class=\"hljs-built_in\">int</span>)\n    }\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">let</span> data = {| {\n  <span class=\"hljs-string\">\"start\"</span>: { <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">\"y\"</span>: -<span class=\"hljs-number\">0.4</span> },\n  <span class=\"hljs-string\">\"end\"</span>:   { <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-number\">5.3</span>, <span class=\"hljs-string\">\"y\"</span>: <span class=\"hljs-number\">3.8</span> }\n} |}\n\n<span class=\"hljs-keyword\">let</span> line = data |> <span class=\"hljs-type\">Js</span>.<span class=\"hljs-type\">Json</span>.parseExn\n                |> <span class=\"hljs-type\">Decode</span>.line</code></pre>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* Reason */</span>\ntype <span class=\"hljs-built_in\">line</span> = {\n  start: <span class=\"hljs-built_in\">point</span>,\n  end_: <span class=\"hljs-built_in\">point</span>,\n  thickness: option(<span class=\"hljs-keyword\">int</span>)\n}\n<span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">point</span> = {\n  x: <span class=\"hljs-keyword\">float</span>,\n  y: <span class=\"hljs-keyword\">float</span>\n};\n\n<span class=\"hljs-keyword\">module</span> Decode = {\n  let <span class=\"hljs-built_in\">point</span> = (json) =>\n    Json.Decode.{\n      x: json |> field(<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-keyword\">float</span>),\n      y: json |> field(<span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-keyword\">float</span>)\n    };\n\n  let <span class=\"hljs-built_in\">line</span> = (json) =>\n    Json.Decode.{\n      start:     json |> field(<span class=\"hljs-string\">\"start\"</span>, <span class=\"hljs-built_in\">point</span>),\n      end_:      json |> field(<span class=\"hljs-string\">\"end\"</span>, <span class=\"hljs-built_in\">point</span>),\n      thickness: json |> optional(field(<span class=\"hljs-string\">\"thickness\"</span>, <span class=\"hljs-keyword\">int</span>))\n    };\n};\n\nlet data = {| {\n  <span class=\"hljs-string\">\"start\"</span>: { <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-string\">\"y\"</span>: <span class=\"hljs-number\">-0.4</span> },\n  <span class=\"hljs-string\">\"end\"</span>:   { <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-number\">5.3</span>, <span class=\"hljs-string\">\"y\"</span>: <span class=\"hljs-number\">3.8</span> }\n} |};\n\nlet <span class=\"hljs-built_in\">line</span> = data |> Js.Json.parseExn\n                |> Decode.<span class=\"hljs-built_in\">line</span>;</code></pre>\n<p>See <a href=\"https://github.com/reasonml-community/bs-json/blob/master/examples/\">examples</a> for more.</p>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install --save bs-json</code></pre>\n<p>Then add <code>bs-json</code> to <code>bs-dependencies</code> in your <code>bsconfig.json</code>:</p>\n<pre><code class=\"hljs language-js\">{\n  ...\n  <span class=\"hljs-string\">\"bs-dependencies\"</span>: [<span class=\"hljs-string\">\"bs-json\"</span>]\n}</code></pre>\n<h2 id=\"changes\"><a aria-hidden=\"true\" href=\"#changes\"><span class=\"icon icon-link\"></span></a>Changes</h2>\n<h3 id=\"024\"><a aria-hidden=\"true\" href=\"#024\"><span class=\"icon icon-link\"></span></a>0.2.4</h3>\n<ul>\n<li>Added <code>Json.Encode.bool</code></li>\n<li>Added <code>Json.Encode.pair</code>\n' Added <code>Json.Encode.withDefault</code></li>\n<li>Added <code>Json.Encode.nullable</code></li>\n<li>Added <code>Json.Encode.arrayOf</code></li>\n<li>Added <code>Json.Encode.jsonArray</code> as replacement for <code>Json.Encode.array</code></li>\n<li>Deprecated <code>Json.Encode.array</code></li>\n</ul>\n<h3 id=\"023\"><a aria-hidden=\"true\" href=\"#023\"><span class=\"icon icon-link\"></span></a>0.2.3</h3>\n<ul>\n<li>Fixed embarrassing bug where an API was used that isn't available on IE (honestly more embarrassed on behalf IE though)</li>\n</ul>\n<h3 id=\"022\"><a aria-hidden=\"true\" href=\"#022\"><span class=\"icon icon-link\"></span></a>0.2.2</h3>\n<ul>\n<li>Added <code>Json.Decode.pair</code></li>\n</ul>\n<h3 id=\"021\"><a aria-hidden=\"true\" href=\"#021\"><span class=\"icon icon-link\"></span></a>0.2.1</h3>\n<ul>\n<li>Added <code>Json.Encode.list</code></li>\n</ul>\n<h3 id=\"020\"><a aria-hidden=\"true\" href=\"#020\"><span class=\"icon icon-link\"></span></a>0.2.0</h3>\n<ul>\n<li>Breaking: Renamed <code>Json.Encode.object_</code> to <code>Json.Encode.dict</code></li>\n<li>Added <code>Json.Encode.object_</code> taking a list of properties instead of a Json.Dict.t as before</li>\n</ul>"}