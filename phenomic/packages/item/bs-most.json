{"filename":"bs-most.json","type":"published","id":"bs-most","name":"bs-most","version":"0.1.1","description":"Reason/BuckleScript bindings for the Most.js reactive toolkit Edit","author":"lilactown","license":"MIT","keywords":["async","reactive","most","functional","streams","most.js","promise","ocaml","bucklescript","reason"],"analyzed":"2017-12-23T01:13:56.379Z","updated":"2017-12-23T01:13:56.379Z","stars":16,"score":0.5717055078569131,"quality":0.693527602188663,"popularity":0.045503464430184826,"maintenance":0.9934886132849985,"homepageUrl":"https://github.com/Lokeh/bs-most#readme","repositoryUrl":"https://github.com/Lokeh/bs-most","npmUrl":"https://www.npmjs.com/package/bs-most","issuesUrl":"https://github.com/Lokeh/bs-most/issues","docsUrl":null,"path":"packages/bs-most","body":"<h1 id=\"bs-most\"><a aria-hidden=\"true\" href=\"#bs-most\"><span class=\"icon icon-link\"></span></a>bs-most</h1>\n<p>BuckleScript bindings for <a href=\"https://github.com/cujojs/most\">Most.js</a>.</p>\n<p>In <a href=\"https://reasonml.github.io/\">Reason</a>:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> add x y => x + y;\n<span class=\"hljs-keyword\">let</span> isEven x => x <span class=\"hljs-keyword\">mod</span> <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;\n\nMost.(\n  fromList [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>]\n  |<span class=\"hljs-type\">> map</span> (add <span class=\"hljs-number\">2</span>)\n  |<span class=\"hljs-type\">> filter</span> isEven\n  |<span class=\"hljs-type\">> observe</span> (<span class=\"hljs-keyword\">fun</span> x => Js.log x)\n  |<span class=\"hljs-type\">> Js</span>.Promise.then_ (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-keyword\">_</span> => {\n    Js.log <span class=\"hljs-string\">\"Stream completed\"</span>;\n    Js.Promise.resolve ()\n  })\n);\n\n/**\n * Logs:\n * <span class=\"hljs-number\">2</span>\n * <span class=\"hljs-number\">4</span>\n * <span class=\"hljs-number\">6</span>\n * <span class=\"hljs-number\">8</span>\n * <span class=\"hljs-number\">10</span>\n * Stream completed\n **/</code></pre>\n<h2 id=\"how-do-i-install-it\"><a aria-hidden=\"true\" href=\"#how-do-i-install-it\"><span class=\"icon icon-link\"></span></a>How do I install it?</h2>\n<p>Inside of a BuckleScript project:</p>\n<pre><code>npm install --save bs-most\n</code></pre>\n<p>Then add <code>bs-most</code> to your <code>bs-dependencies</code> in <code>bsconfig.json</code>:</p>\n<pre><code>{\n  ...\n  \"bs-dependencies\": [\n    \"bs-most\"\n  ]\n}\n</code></pre>\n<h2 id=\"how-do-i-use-it\"><a aria-hidden=\"true\" href=\"#how-do-i-use-it\"><span class=\"icon icon-link\"></span></a>How do I use it?</h2>\n<p>The Most.js <a href=\"https://github.com/cujojs/most/blob/master/docs/api.md\">API docs</a> are probably the best source of information about each method. This library attempts to provide very low-level bindings, except for what's noted in the <strong>What's different</strong> section.</p>\n<p>The bindings are a single file in <code>src/most.re</code>. I try to provide comments next to each binding and am working on flushing out tests so that users can refer to them.</p>\n<p>I am also available by e-mail or DM on the Reason discord (username: @lilactown). </p>\n<h2 id=\"whats-missing\"><a aria-hidden=\"true\" href=\"#whats-missing\"><span class=\"icon icon-link\"></span></a>What's missing</h2>\n<ol>\n<li><code>generate</code> - Reason doesn't have generator support yet</li>\n<li><code>transduce</code> - Awkward to use in Reason/OCaml without a solid transducer impl (maybe coming soon?? ðŸ˜‰)</li>\n<li><code>combineArray</code> - the callback for this is variadic (depending on how many streams you have in the array), not sure how to type it yet ðŸ˜ž</li>\n</ol>\n<h2 id=\"whats-different\"><a aria-hidden=\"true\" href=\"#whats-different\"><span class=\"icon icon-link\"></span></a>What's different</h2>\n<ol>\n<li>Predicates that normally return \"truthy\" values, now only accept returning booleans</li>\n<li><code>sample</code> is variadic so we offer <code>sample1</code>, <code>sample2</code>, <code>sample3</code>... <code>sample6</code></li>\n<li><code>fromEvent</code> - DOM events are supported, but generic <code>EventEmitter</code>'s are not yet</li>\n<li><code>from</code> only works on arrays right now; generic iterators must be coerced</li>\n<li><code>fromList</code> is a function that creates a stream from a Reason <code>List</code> type, e.g. <code>fromList([1, 2, 3])</code></li>\n<li><code>unfold</code> is modeled a bit differently - instead of taking in a JS object <code>{ done, value, seed }</code>, it takes an <code>option (value, seed)</code>.\nExample:</li>\n</ol>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* emits 2,4,6 then completes */</span>\nMost.unfold\n  (\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> seed =></span>\n      <span class=\"hljs-keyword\">if</span> (seed &#x3C; <span class=\"hljs-number\">4</span>) {\n        let nextSeed = seed + <span class=\"hljs-number\">1</span>;\n        Some (seed * <span class=\"hljs-number\">2</span>, nextSeed)\n      } <span class=\"hljs-keyword\">else</span> {\n        None\n      }\n  )\n  <span class=\"hljs-number\">1</span>;</code></pre>\n<h1 id=\"subjects\"><a aria-hidden=\"true\" href=\"#subjects\"><span class=\"icon icon-link\"></span></a>Subjects</h1>\n<p>This library also includes some bindings for <a href=\"https://github.com/mostjs-community/subject\">Subjects</a>. Subjects are very useful for e.g. implementing a state store/dispatch system. The API is a little bit different from the raw <code>most-subject</code> library:</p>\n<ul>\n<li><code>Subject.make</code>: creates an <a href=\"https://github.com/mostjs-community/subject#asynct-subjectt\">asynchronous Subject</a></li>\n<li><code>Subject.asStream</code>: casts a subject to a stream, to be used by the rest of the <code>Most</code> module</li>\n<li><code>Subject.next</code>: emits a value on a subject</li>\n<li><code>Subject.error</code>: emits an error on a subject</li>\n<li><code>Subject.complete</code>: completes a subject with no value</li>\n<li><code>Subject.completeWith</code>: completes a subject with a value</li>\n</ul>\n<h2 id=\"build\"><a aria-hidden=\"true\" href=\"#build\"><span class=\"icon icon-link\"></span></a>Build</h2>\n<pre><code>npm run build\n</code></pre>\n<h2 id=\"build--watch\"><a aria-hidden=\"true\" href=\"#build--watch\"><span class=\"icon icon-link\"></span></a>Build + Watch</h2>\n<pre><code>npm run watch\n</code></pre>\n<h2 id=\"testing\"><a aria-hidden=\"true\" href=\"#testing\"><span class=\"icon icon-link\"></span></a>Testing</h2>\n<pre><code>npm run test\n</code></pre>"}