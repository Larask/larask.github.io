{"filename":"bs-react-native.json","type":"published","id":"bs-react-native","name":"bs-react-native","version":"0.5.0","description":"[![Build Status](https://travis-ci.org/reasonml-community/bs-react-native.svg?branch=master)](https://travis-ci.org/reasonml-community/bs-react-native)","license":"MIT","keywords":["react-native","bucklescript","reason"],"analyzed":"2017-12-15T19:43:09.201Z","updated":"2017-12-15T19:43:09.201Z","stars":186,"score":0.600522918737319,"quality":0.7058660980182657,"popularity":0.110758091734607,"maintenance":0.9999935920706481,"homepageUrl":"https://github.com/reasonml-community/bs-react-native#readme","repositoryUrl":"https://github.com/reasonml-community/bs-react-native","npmUrl":"https://www.npmjs.com/package/bs-react-native","issuesUrl":"https://github.com/reasonml-community/bs-react-native/issues","docsUrl":null,"path":"packages/bs-react-native","body":"<h1 id=\"bucklescript-bindings-for-react-native\"><a aria-hidden=\"true\" href=\"#bucklescript-bindings-for-react-native\"><span class=\"icon icon-link\"></span></a><a href=\"https://github.com/bloomberg/bucklescript\">BuckleScript</a> bindings for <a href=\"https://github.com/facebook/react-native\">React Native</a></h1>\n<p><a href=\"https://travis-ci.org/reasonml-community/bs-react-native\"><img src=\"https://travis-ci.org/reasonml-community/bs-react-native.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h2 id=\"getting-started\"><a aria-hidden=\"true\" href=\"#getting-started\"><span class=\"icon icon-link\"></span></a>Getting started</h2>\n<p>Great that you want to use Reason with React Native! To get everything running are just a couple of steps.\nLet's assume that you already have a React Native project. Otherwise follow the React Native <a href=\"http://facebook.github.io/react-native/docs/getting-started.html\">instructions</a> until you have your app running.</p>\n<ol>\n<li>Install <a href=\"https://github.com/bloomberg/bucklescript\">Bucklescript</a> (the Reason -> JS compiler), <a href=\"https://github.com/reasonml/reason-react\">Reason-React</a> and <code>bs-react-native</code>:</li>\n</ol>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\"># substitute yarn with npm if you prefer</span>\nyarn add bs-platform reason-react bs-react-native</code></pre>\n<ol start=\"2\">\n<li>Create a <code>re</code> folder (there will be your Reason code)</li>\n<li>Create a <code>bsconfig.json</code> with the following content file in your project root</li>\n</ol>\n<pre><code class=\"hljs language-json\">{\n    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"my-awesome-app\"</span>,\n    <span class=\"hljs-attr\">\"reason\"</span>: {\n        <span class=\"hljs-attr\">\"react-jsx\"</span>: <span class=\"hljs-number\">2</span>\n    },\n    <span class=\"hljs-attr\">\"bsc-flags\"</span>: [<span class=\"hljs-string\">\"-bs-super-errors\"</span>],\n    <span class=\"hljs-attr\">\"bs-dependencies\"</span>: [<span class=\"hljs-string\">\"bs-react-native\"</span>, <span class=\"hljs-string\">\"reason-react\"</span>],\n    <span class=\"hljs-attr\">\"sources\"</span>: [{\n        <span class=\"hljs-attr\">\"dir\"</span>: <span class=\"hljs-string\">\"re\"</span>\n    }],\n    <span class=\"hljs-attr\">\"refmt\"</span>: <span class=\"hljs-number\">3</span>\n}</code></pre>\n<ol start=\"4\">\n<li>You are nearly done, the last configuration before we get to the fun stuff. In your <code>package.json</code> add to the <code>\"scripts\"</code> section two scripts:</li>\n</ol>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"scripts\"</span>: {\n  ...\n  <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"bsb -make-world -clean-world\"</span>,\n  <span class=\"hljs-attr\">\"watch\"</span>: <span class=\"hljs-string\">\"bsb -make-world -clean-world -w\"</span>\n}</code></pre>\n<ol start=\"5\">\n<li>Now you can build all your (so far nonexsisting) Reason in two modes:</li>\n</ol>\n<ul>\n<li><code>yarn run build</code> performs a single build</li>\n<li><code>yarn run watch</code> enters the watch mode</li>\n</ul>\n<ol start=\"6\">\n<li>Now we come to the fun stuff! Create a new file <code>re/app.re</code> and make it look like this:</li>\n</ol>\n<pre><code class=\"hljs language-reason\">open BsReactNative;\n\n<span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span>\n  &#x3C;View style=Style.(style([flex(<span class=\"hljs-number\">1.</span>), justifyContent(<span class=\"hljs-string\">`center), alignItems(`</span>center)]))>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Reason is awesome!\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>;</code></pre>\n<p>and start the watcher with <code>yarn run watch</code> if you haven't done it yet.</p>\n<ol start=\"7\">\n<li>We are nearly done! We now have to adopt the <code>index.ios.js</code> / <code>index.android.js</code> to look like this</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { app } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib/js/re/app.js\"</span>;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">'MyAwesomeProject'</span>, () => app);</code></pre>\n<p><strong>Note:</strong> Make sure that the first argument to <code>AppRegistry.registerComponent</code> is <strong>your</strong> correct project name.</p>\n<p>If you are using <code>react-native-scripts</code>, then you will need to modify <code>App.js</code> to be like this</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { app } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./lib/js/re/app.js\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> app;</code></pre>\n<ol start=\"8\">\n<li>\n<p>Now go to a new tab and start your app with <code>react-native run-ios</code> or <code>react-native run-android</code>.</p>\n</li>\n<li>\n<p>Great you are all set up! Check the source of <code>bs-react-native</code> to find out more about the implemented APIs and Components. If you get stuck just ask on our <a href=\"https://discord.gg/reasonml\">Discord Server</a>! Happy Hacking!</p>\n</li>\n</ol>\n<p>Here are some more things which will be probably useful for you:</p>\n<ul>\n<li><a href=\"https://reasonml.github.io/reason-react/\">Reason-React Documentation</a></li>\n<li><a href=\"http://bucklescript.github.io/bucklescript/Manual.html\">Bucklescript Manual</a></li>\n</ul>\n<h2 id=\"can-i-really-build-my-react-native-app-with-reason\"><a aria-hidden=\"true\" href=\"#can-i-really-build-my-react-native-app-with-reason\"><span class=\"icon icon-link\"></span></a>Can I really build my React Native app with Reason?</h2>\n<p>Yes! Check out the <a href=\"https://github.com/FormidableLabs/seattlejsconf-app\">Seattle JS Conf App</a> for a real world App written with Reason.</p>\n<h3 id=\"disclaimer\"><a aria-hidden=\"true\" href=\"#disclaimer\"><span class=\"icon icon-link\"></span></a>Disclaimer</h3>\n<p>There are some components and APIs missing. You can find an overview of the implemented components and APIs <a href=\"STATUS.md\">here</a>. Contributions of Components and APIs are very welcome! The bindings are targeted to React Native <strong>0.46+</strong>.</p>\n<h2 id=\"style\"><a aria-hidden=\"true\" href=\"#style\"><span class=\"icon icon-link\"></span></a>Style</h2>\n<p>Since we have a proper type system we can make styles <strong>typesafe</strong>! Therefore styles are a little bit different declared than in JavaScript:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">open</span> BsReactNative;\n\n<span class=\"hljs-comment\">/* inline styles */</span>\n&#x3C;<span class=\"hljs-built_in\">View</span>\n  style=(\n    Style.style([\n      Style.flexDirection(`column),\n      Style.backgroundColor(<span class=\"hljs-string\">\"#6698FF\"</span>),\n      Style.marginTop(<span class=\"hljs-number\">5</span>)\n    ])\n  )\n/>;\n\n<span class=\"hljs-comment\">/* inline styles with a local open */</span>\n&#x3C;<span class=\"hljs-built_in\">View</span> style=Style.(style([flexDirection(`column), backgroundColor(<span class=\"hljs-string\">\"#6698FF\"</span>), marginTop(<span class=\"hljs-number\">5</span>)])) />;\n\n<span class=\"hljs-comment\">/* StyleSheets with a local open */</span>\n<span class=\"hljs-keyword\">let</span> styles =\n  StyleSheet.<span class=\"hljs-keyword\">create</span>(\n    Style.({<span class=\"hljs-string\">\"wrapper\"</span>: style([flexDirection(`column), backgroundColor(<span class=\"hljs-string\">\"#6698FF\"</span>), marginTop(<span class=\"hljs-number\">5</span>)])})\n  );\n\n&#x3C;<span class=\"hljs-built_in\">View</span> style=styles<span class=\"hljs-meta\">##wrapper />;</span></code></pre>\n<h2 id=\"toubleshooting\"><a aria-hidden=\"true\" href=\"#toubleshooting\"><span class=\"icon icon-link\"></span></a>Toubleshooting</h2>\n<h3 id=\"native-module-cannot-be-null-with-create-react-native-app\"><a aria-hidden=\"true\" href=\"#native-module-cannot-be-null-with-create-react-native-app\"><span class=\"icon icon-link\"></span></a><code>Native module cannot be null</code> with create-react-native-app</h3>\n<p>Currently BuckleScript can generate <code>import * as ReactNative from 'react-native'</code>, which breaks\ncreate-react-native-app. To get around this you can force BuckleScript to generate CommonJS\nmodules instead of ES Modules using:</p>\n<pre><code class=\"hljs language-json\">/* bsconfig.json */\n{\n  /* ... */\n  <span class=\"hljs-attr\">\"package-specs\"</span>: [\n    {\n      <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>\n    }\n  ]\n}</code></pre>"}