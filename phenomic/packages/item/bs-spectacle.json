{"filename":"bs-spectacle.json","type":"published","id":"bs-spectacle","name":"bs-spectacle","version":"0.1.0","description":"---","author":"Piotrek Dubiel","license":"MIT","keywords":["bucklescript","reason","spectacle"],"analyzed":"2017-12-12T20:28:55.998Z","updated":"2017-12-12T20:28:55.998Z","stars":0,"score":0.39036849876212093,"quality":0.5133866802052347,"popularity":0.014443676432499405,"maintenance":0.6608491655690736,"homepageUrl":"https://github.com/piotrdubiel/bs-spectacle#readme","repositoryUrl":"https://github.com/piotrdubiel/bs-spectacle","npmUrl":"https://www.npmjs.com/package/bs-spectacle","issuesUrl":"https://github.com/piotrdubiel/bs-spectacle/issues","docsUrl":null,"path":"packages/bs-spectacle","body":"<h1 id=\"construction-bs-spectacle---bucklescript-bindings-for-spectacle\"><a aria-hidden=\"true\" href=\"#construction-bs-spectacle---bucklescript-bindings-for-spectacle\"><span class=\"icon icon-link\"></span></a>:construction: bs-spectacle - <a href=\"https://github.com/bucklescript/bucklescript\">BuckleScript</a> bindings for <a href=\"https://github.com/FormidableLabs/spectacle\">Spectacle</a> <a href=\"https://www.npmjs.com/package/bs-spectacle\"><img src=\"https://img.shields.io/npm/v/bs-spectacle.svg?style=flat-square\" alt=\"npm (scoped)\"></a></h1>\n<hr>\n<h2 id=\"status\"><a aria-hidden=\"true\" href=\"#status\"><span class=\"icon icon-link\"></span></a>Status</h2>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled></p>\n<ul>\n<li>means it's done</li>\n</ul>\n</li>\n<li>[~] - moreless finished</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled></p>\n<ul>\n<li>not even touched</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"components\"><a aria-hidden=\"true\" href=\"#components\"><span class=\"icon icon-link\"></span></a>Components</h3>\n<ul>\n<li>[~] Deck</li>\n<li>[~] Slide (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Notes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Layout</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Fit</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Fill</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Markdown</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Magic</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Appear</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> BlockQuote, Quote and Cite (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> CodePane (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Code (Base)</li>\n<li>[~] ComponentPlayground</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> GoToAction (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Heading (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Image (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Link (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> List &#x26; ListItem (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> S (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Table, TableRow, TableBody, TableHeader, TableHeaderItem and TableItem (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Text (Base)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Typeface</li>\n</ul>\n<h3 id=\"apis\"><a aria-hidden=\"true\" href=\"#apis\"><span class=\"icon icon-link\"></span></a>APIs</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Theme</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Transition Function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> MarkdownSlides</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Preloader</li>\n</ul>\n<h2 id=\"example\"><a aria-hidden=\"true\" href=\"#example\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>See <code>example/</code>. It uses <em>almost</em> all features of <strong>Spectacle</strong>.</p>\n<pre><code class=\"hljs language-reason\">open BsSpectacle;\n\nlet theme =\n  Theme.(\n    createTheme(\n      {primary: <span class=\"hljs-string\">\"#26A0D1\"</span>, secondary: <span class=\"hljs-string\">\"white\"</span>, tertiary: <span class=\"hljs-string\">\"#505050\"</span>, quarternary: <span class=\"hljs-string\">\"white\"</span>},\n      {\n<span class=\"hljs-symbol\">        primary:</span> {name: <span class=\"hljs-string\">\"Merriweather\"</span>, googleFont: true, styles: [|<span class=\"hljs-string\">\"300\"</span>|]},\n<span class=\"hljs-symbol\">        secondary:</span> {name: <span class=\"hljs-string\">\"Roboto\"</span>, googleFont: true, styles: [|<span class=\"hljs-string\">\"100\"</span>|]},\n<span class=\"hljs-symbol\">        tertiary:</span> simpleFont(<span class=\"hljs-string\">\"monospace\"</span>)\n      }\n    )\n  );\n\nlet s = ReasonReact.stringToElement;\n\nlet component = ReasonReact.statelessComponent(<span class=\"hljs-string\">\"Easy\"</span>);\n\nlet make = (_children) => {\n  ...component,\n<span class=\"hljs-symbol\">  render:</span> (_self) =>\n    <span class=\"hljs-params\">&#x3C;Deck transition=[|`zoom, `slide|] theme></span>\n      <span class=\"hljs-params\">&#x3C;Slide></span>\n        <span class=\"hljs-params\">&#x3C;Heading textColor=\"secondary\" textFont=\"secondary\"></span> (s(<span class=\"hljs-string\">\"Hello, world\"</span>)) <span class=\"hljs-params\">&#x3C;/Heading></span>\n      <span class=\"hljs-params\">&#x3C;/Slide></span>\n      <span class=\"hljs-params\">&#x3C;Slide transition=[|`slide|] bgColor=\"secondary\"></span>\n        <span class=\"hljs-params\">&#x3C;BlockQuote></span>\n          <span class=\"hljs-params\">&#x3C;Quote></span> (s({js|Itâ€™s easy, see...|js})) <span class=\"hljs-params\">&#x3C;/Quote></span>\n          <span class=\"hljs-params\">&#x3C;Cite></span> (s(<span class=\"hljs-string\">\"Unknown\"</span>)) <span class=\"hljs-params\">&#x3C;/Cite></span>\n        <span class=\"hljs-params\">&#x3C;/BlockQuote></span>\n      <span class=\"hljs-params\">&#x3C;/Slide></span>\n    <span class=\"hljs-params\">&#x3C;/Deck></span>\n};</code></pre>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<p>Easiest way is:</p>\n<ol>\n<li>\n<p>use <code>create-react-app</code></p>\n</li>\n<li>\n<p>install this bindings and spectacle</p>\n<pre><code>$ npm install --save bs-spectacle spectacle-scripts reason-react\n# or\n$ yarn add bs-spectacle spectacle-scripts reason-react\n</code></pre>\n</li>\n<li>\n<p>add <code>bs-spectacle</code> to <code>bs-dependencies</code> in your <code>bsconfig.json</code></p>\n<pre><code>{\n...\n\"bs-dependencies\": [\"bs-spectacle\"]\n}\n</code></pre>\n</li>\n<li>\n<p>modify <code>package.json</code> scripts</p>\n<pre><code>\"scripts\": {\n    \"build\": \"bsb -make-world &#x26;&#x26; react-scripts build\",\n    \"start\": \"bsb -make-world -w\",\n    \"clean\": \"bsb -clean-world\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"\n}\n</code></pre>\n</li>\n</ol>\n<p>To run it in dev mode, run <code>npm start</code> in one shell and <code>react-scripts start</code> in another shell.</p>"}