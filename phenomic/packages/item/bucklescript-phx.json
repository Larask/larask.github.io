{"filename":"bucklescript-phx.json","type":"published","id":"bucklescript-phx","name":"bucklescript-phx","version":"0.1.3","description":"BuckleScript binding for Phoenix Channel/Presence to Phoenix's official JavaScript client","author":"JackalCooper","license":"LGPL-3.0","keywords":["tea","phoenix","ocaml","bucklescript"],"analyzed":"2017-12-22T23:47:11.138Z","updated":"2017-12-22T23:47:11.138Z","stars":11,"score":0.4398146083905495,"quality":0.5063960782201744,"popularity":0.048345864869192616,"maintenance":0.7742135206293708,"homepageUrl":"https://github.com/phoenix-china/bucklescript-phx#readme","repositoryUrl":"https://github.com/phoenix-china/bucklescript-phx","npmUrl":"https://www.npmjs.com/package/bucklescript-phx","issuesUrl":"https://github.com/phoenix-china/bucklescript-phx/issues","docsUrl":null,"path":"packages/bucklescript-phx","body":"<h1 id=\"bucklescript-phoenix\"><a aria-hidden=\"true\" href=\"#bucklescript-phoenix\"><span class=\"icon icon-link\"></span></a>BuckleScript Phoenix</h1>\n<p><a href=\"https://nodei.co/npm/bucklescript-phx/\"><img src=\"https://nodei.co/npm/bucklescript-phx.png?compact=true\" alt=\"NPM\"></a></p>\n<p><a href=\"https://travis-ci.org/OvermindDL1/bucklescript-phx\"><img src=\"https://travis-ci.org/phoenix-china/bucklescript-phx.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h4 id=\"bucklescript-binding-for-phoenix-channelpresence-to-phoenixs-official-javascript-client\"><a aria-hidden=\"true\" href=\"#bucklescript-binding-for-phoenix-channelpresence-to-phoenixs-official-javascript-client\"><span class=\"icon icon-link\"></span></a>BuckleScript binding for Phoenix Channel/Presence to Phoenix's official JavaScript client.</h4>\n<h4 id=\"this-is-usable-now\"><a aria-hidden=\"true\" href=\"#this-is-usable-now\"><span class=\"icon icon-link\"></span></a>This is usable now.</h4>\n<h4 id=\"feel-free-to-create-prs\"><a aria-hidden=\"true\" href=\"#feel-free-to-create-prs\"><span class=\"icon icon-link\"></span></a>Feel free to create PRs.</h4>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Connect socket</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Join channel</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Push event</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Handle event</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Presence</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Support The Elm Architecture on BuckleScript (<a href=\"BuckleScript-tea\">https://github.com/OvermindDL1/bucklescript-tea</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Fallback support for polling.</li>\n</ul>\n<h4 id=\"to-install\"><a aria-hidden=\"true\" href=\"#to-install\"><span class=\"icon icon-link\"></span></a>To install</h4>\n<pre><code class=\"hljs language-bash\">npm install -save bucklescript-phx</code></pre>\n<h4 id=\"please-update-your-bsconfigjson-to-make-bsb-aware-of-this-dependency\"><a aria-hidden=\"true\" href=\"#please-update-your-bsconfigjson-to-make-bsb-aware-of-this-dependency\"><span class=\"icon icon-link\"></span></a>Please update your <code>bsconfig.json</code> to make <code>bsb</code> aware of this dependency</h4>\n<pre><code>\"bs-dependencies\": [\n    \"bucklescript-phx\"\n  ]\n</code></pre>\n<h4 id=\"notice\"><a aria-hidden=\"true\" href=\"#notice\"><span class=\"icon icon-link\"></span></a>Notice:</h4>\n<ol>\n<li>\n<p>Please add official Phoenix client as your dependency to make sure BuckleScript is able to require Phoenix's js.</p>\n</li>\n<li>\n<p>Meta of Presence and payload of incoming event are decalred as <code>Js_json.t</code> which means you need to decode it with your prefered decoder (in TEA it is very convenient with <code>Json.Decoder.decodeValue</code>).</p>\n</li>\n<li>\n<p>The bindings are based on <a href=\"DefinitelyTyped\">https://github.com/DefinitelyTyped/DefinitelyTyped</a>. There might be some error on mapping the types. Please help correct them if you find anything wrong. Thank you!</p>\n</li>\n</ol>\n<h4 id=\"here-are-the-examples\"><a aria-hidden=\"true\" href=\"#here-are-the-examples\"><span class=\"icon icon-link\"></span></a>Here are the examples:</h4>\n<p>To join a channel:</p>\n<pre><code class=\"hljs language-ocaml\"><span class=\"hljs-keyword\">open</span> <span class=\"hljs-type\">Phx</span>\n\n<span class=\"hljs-keyword\">let</span> handleReiceive event any =\n  <span class=\"hljs-keyword\">match</span> event <span class=\"hljs-keyword\">with</span>\n  | <span class=\"hljs-string\">\"ok\"</span> -> <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleReiceive:\"</span> ^ event, <span class=\"hljs-string\">\"Joined\"</span>)\n  | <span class=\"hljs-string\">\"error\"</span> -> <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleReiceive:\"</span> ^ event, <span class=\"hljs-string\">\"Failed to join channel\"</span>)\n  | _ -> <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleReiceive:\"</span> ^ event, any)\n\n<span class=\"hljs-keyword\">let</span> handleEvent event response =\n  <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleEvent:\"</span> ^ event, response) <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-literal\">()</span>\n\n\n<span class=\"hljs-keyword\">let</span> handleSyncState response =\n  <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleSyncState\"</span>, response) <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-comment\">(*let _ = Js.log (Array.iter (fun key -> Js.log (Js_dict.unsafeGet response key)) (Js_dict.keys response) ) in*)</span>\n  <span class=\"hljs-keyword\">let</span> _presences  =  <span class=\"hljs-type\">Presence</span>.syncState (<span class=\"hljs-type\">Js</span>.<span class=\"hljs-type\">Dict</span>.empty <span class=\"hljs-literal\">()</span>) response <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-literal\">()</span>\n\n<span class=\"hljs-keyword\">let</span> handleSyncDiff diff =\n  <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleSyncDiff:diff\"</span>, diff) <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">let</span> presences  =  <span class=\"hljs-type\">Presence</span>.syncDiff (<span class=\"hljs-type\">Js</span>.<span class=\"hljs-type\">Dict</span>.empty <span class=\"hljs-literal\">()</span>) diff <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-type\">Js</span>.log (<span class=\"hljs-string\">\"handleSyncDiff:presences\"</span>, presences) <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-literal\">()</span>\n\n<span class=\"hljs-keyword\">let</span> _ =\n  <span class=\"hljs-keyword\">let</span> socket = initSocket <span class=\"hljs-string\">\"/socket\"</span>\n               |> connectSocket\n               |> putOnClose (<span class=\"hljs-keyword\">fun</span> <span class=\"hljs-literal\">()</span> -> <span class=\"hljs-type\">Js</span>.log <span class=\"hljs-string\">\"Socket closed\"</span>) <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">let</span> channel = socket\n                |> initChannel <span class=\"hljs-string\">\"user:lobby\"</span> <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">let</span> _ = channel\n          |> putOn <span class=\"hljs-string\">\"from_server\"</span> (handleEvent <span class=\"hljs-string\">\"from:server\"</span>)\n          |> putOnSyncState handleSyncState\n          |> putOnsyncDiff handleSyncDiff\n          |> joinChannel\n          |> putReceive <span class=\"hljs-string\">\"ok\"</span> (handleReiceive <span class=\"hljs-string\">\"ok\"</span>)\n          |> putReceive <span class=\"hljs-string\">\"error\"</span> (handleReiceive <span class=\"hljs-string\">\"error\"</span>) <span class=\"hljs-keyword\">in</span>\n  push <span class=\"hljs-string\">\"new:message\"</span> [%bs.obj { user = <span class=\"hljs-string\">\"Hello, Elixir! This is a greeting from BuckleScript!\"</span>} ] channel</code></pre>"}