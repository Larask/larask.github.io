{"filename":"json-r.json","type":"published","id":"json-r","name":"json-r","version":"2.3.0","description":"A BuckleScript lib for handling JSON in `Result` favor, written in [ReasonML](http://facebook.github.io/reason/).","author":"CHEN Xianan","license":"MIT","keywords":["json","bucklescript"],"analyzed":"2017-12-18T10:32:37.893Z","updated":"2017-12-18T10:32:37.893Z","stars":7,"score":0.6049850705439781,"quality":0.8124786531920637,"popularity":0.03233402942644605,"maintenance":0.9997844693917226,"homepageUrl":"https://github.com/cxa/JsonR","repositoryUrl":"https://github.com/cxa/JsonR","npmUrl":"https://www.npmjs.com/package/json-r","issuesUrl":"https://github.com/cxa/JsonR/issues","docsUrl":null,"path":"packages/json-r","body":"<h1 id=\"jsonr\"><a aria-hidden=\"true\" href=\"#jsonr\"><span class=\"icon icon-link\"></span></a>JsonR</h1>\n<p>A BuckleScript lib for handling JSON in <code>Result</code> favor, written in <a href=\"http://facebook.github.io/reason/\">ReasonML</a>.</p>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<p>Add <code>json-r</code> to your project's dependencies by <code>yarn</code> or <code>npm</code>, And add it to <code>bs-dependencies</code> for <code>bsconfig.json</code>, e.g.</p>\n<pre><code class=\"hljs language-json\">{\n    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"coolproj\"</span>,\n    <span class=\"hljs-attr\">\"bs-dependencies\"</span>: [\n      <span class=\"hljs-string\">\"json-r\"</span>\n    ]\n}</code></pre>\n<h3 id=\"basic-example\"><a aria-hidden=\"true\" href=\"#basic-example\"><span class=\"icon icon-link\"></span></a>Basic example</h3>\n<pre><code class=\"hljs language-reason\">open JsonR.Json;\nopen Js_result;\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">json</span> = parse_result json_source;\n\n<span class=\"hljs-comment\">/* Access a field and its value, return a Js_result type */</span>\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">title</span> = json |> string_for <span class=\"hljs-string\">\"title\"</span>;\n\n<span class=\"hljs-comment\">/* or more verbose */</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">title</span> = json |> member <span class=\"hljs-string\">\"title\"</span> |> to_string;\n\n\n<span class=\"hljs-comment\">/* you can also pass key path */</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">age</span> = json |> int_for <span class=\"hljs-string\">\"author.age\"</span>;\n\n/ * <span class=\"hljs-literal\">or</span> */\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">age</span> = json |> member <span class=\"hljs-string\">\"author.age\"</span> |> to_int;\n\nswitch age {\n| Ok <span class=\"hljs-attr\">a</span> => DoWhatYouWant a\n| Error <span class=\"hljs-attr\">e</span> => HeyWeCantParseOutTheAge_CheckTheErrorMessage e\n};</code></pre>\n<p>You can open <code>__tests__/test.re</code> to view more examples.</p>\n<h3 id=\"advance-usage\"><a aria-hidden=\"true\" href=\"#advance-usage\"><span class=\"icon icon-link\"></span></a>Advance usage</h3>\n<p>Need to use the another <code>Result</code> type such as <code>Containers.Result</code>? Just <code>Module Json = JsonR.Impl Containers.Result;</code>.</p>\n<h2 id=\"license\"><a aria-hidden=\"true\" href=\"#license\"><span class=\"icon icon-link\"></span></a>LICENSE</h2>\n<p>MIT.</p>"}