{"filename":"re-formality.json","type":"published","id":"re-formality","name":"re-formality","version":"0.0.3","description":"Reasonable form validation tool for reason-react","author":"Alex Fedoseev","license":"MIT","keywords":["reason-react","react","ocaml","bucklescript","reason"],"analyzed":"2017-12-22T22:01:18.479Z","updated":"2017-12-22T22:01:18.479Z","stars":2,"score":0.4879410699803369,"quality":0.43004566138517225,"popularity":0.03118269421851564,"maintenance":0.9943240816808707,"homepageUrl":"https://github.com/alexfedoseev/re-formality#readme","repositoryUrl":"https://github.com/alexfedoseev/re-formality","npmUrl":"https://www.npmjs.com/package/re-formality","issuesUrl":"https://github.com/alexfedoseev/re-formality/issues","docsUrl":null,"path":"packages/re-formality","body":"<h1 id=\"formality\"><a aria-hidden=\"true\" href=\"#formality\"><span class=\"icon icon-link\"></span></a>Formality</h1>\n<p>Reasonable form validation tool for <a href=\"https://reasonml.github.io/reason-react/\"><code>reason-react</code></a>.</p>\n<h2 id=\"why\"><a aria-hidden=\"true\" href=\"#why\"><span class=\"icon icon-link\"></span></a>Why</h2>\n<p>The main goal of the library is to simplify an implementation of forms validation preserving an excellent UX. It offers set of predefined strategies to handle different kinds of validation flows.</p>\n<h2 id=\"examples\"><a aria-hidden=\"true\" href=\"#examples\"><span class=\"icon icon-link\"></span></a>Examples</h2>\n<ul>\n<li>Signup form [ <a href=\"https://formality.now.sh\">live</a> Â· <a href=\"examples/SignupForm.re\">source</a> ]</li>\n</ul>\n<h2 id=\"-wip-\"><a aria-hidden=\"true\" href=\"#-wip-\"><span class=\"icon icon-link\"></span></a>ðŸš§ WIP ðŸš§</h2>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Base API</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Validation strategies</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Dependant fields validation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Async validations</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Convert <a href=\"https://github.com/shakacode/react-validation-layer/tree/master/__tests__\">test suit</a></li>\n</ul>\n<h2 id=\"installation\"><a aria-hidden=\"true\" href=\"#installation\"><span class=\"icon icon-link\"></span></a>Installation</h2>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> yarn / npm</span>\nyarn add re-formality\nnpm install --save re-formality</code></pre>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<p>Docs are WIP. Here's the quick example. See <a href=\"examples/\"><code>examples</code></a> for real-world cases.</p>\n<blockquote>\n<p>Also, you can read more on <code>strategies</code> <a href=\"https://github.com/shakacode/react-validation-layer#propsstrategy\">here</a></p>\n</blockquote>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">module</span> MyForm = {\n  <span class=\"hljs-keyword\">type</span> field =\n    | Email\n    | Password;\n  <span class=\"hljs-keyword\">type</span> state = {\n    email: <span class=\"hljs-built_in\">string</span>,\n    password: <span class=\"hljs-built_in\">string</span>\n  };\n  <span class=\"hljs-keyword\">let</span> update = <span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">field, value</span>), state</span>) =></span>\n    <span class=\"hljs-keyword\">switch</span> (field, value) {\n    | <span class=\"hljs-function\">(<span class=\"hljs-params\">Email, value</span>) =></span> {...state, email: value}\n    | <span class=\"hljs-function\">(<span class=\"hljs-params\">Password, value</span>) =></span> {...state, password: value}\n    };\n  <span class=\"hljs-keyword\">let</span> strategy = Formality.Strategy.OnFirstSuccessOrFirstBlur;\n  <span class=\"hljs-keyword\">module</span> Validators = Formality.MakeValidators({<span class=\"hljs-keyword\">type</span> t = field;});\n  <span class=\"hljs-keyword\">type</span> validators = Validators.t(Formality.validator(field, state));\n  <span class=\"hljs-keyword\">let</span> validators = Formality.(\n    Validators.empty\n    |> Validators.add(Email, {\n         strategy: None, <span class=\"hljs-comment\">/* None means global strategy will be used, you can override it w/ Some(Formality.Strategy.t) */</span>\n         dependents: None, <span class=\"hljs-comment\">/* You can define fields which must be revalidated on change of this field's value */</span>\n         validate: <span class=\"hljs-function\">(<span class=\"hljs-params\">value, state</span>) =></span> {\n           <span class=\"hljs-keyword\">switch</span> (value |> Js.Option.getWithDefault(state.email)) {\n           | <span class=\"hljs-string\">\"\"</span> => Valid(<span class=\"hljs-literal\">false</span>)\n           | _ => Valid(<span class=\"hljs-literal\">true</span>)\n           }\n         }\n       })\n    |> Validators.add(Password, {\n         strategy: None, <span class=\"hljs-comment\">/* None means global strategy will be used, you can override it w/ Some(Formality.Strategy.t) */</span>\n         dependents: None, <span class=\"hljs-comment\">/* You can define fields which must be revalidated on change of this field's value */</span>\n         validate: <span class=\"hljs-function\">(<span class=\"hljs-params\">value, state</span>) =></span> {\n           <span class=\"hljs-keyword\">switch</span> (value |> Js.Option.getWithDefault(state.password)) {\n           | <span class=\"hljs-string\">\"\"</span> => Valid(<span class=\"hljs-literal\">false</span>)\n           | _ => Valid(<span class=\"hljs-literal\">true</span>)\n           }\n         }\n       })\n    );\n};\n\n<span class=\"hljs-keyword\">module</span> Container = Formality.Make(MyForm);\n\nlet component = ReasonReact.statelessComponent(\"MyForm\");\n\nlet make = (_) => {\n  ...component,\n  render: <span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =></span>\n    &#x3C;Container\n      initialState={email: <span class=\"hljs-string\">\"\"</span>, password: <span class=\"hljs-string\">\"\"</span>}\n      onSubmit=<span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">~notifyOnSuccess, ~notifyOnFailure, state</span>) => {<span class=\"hljs-comment\">/* Submit form... */</span>}</span>)>\n      ...(<span class=\"hljs-params\">\n           (<span class=\"hljs-params\">{state, results, update, blur, submit, submitting}</span>) =>\n             &#x3C;form className=\"form\" onSubmit=submit>\n               &#x3C;input\n                 value=state.email\n                 disabled=(<span class=\"hljs-params\">submitting |> Js.<span class=\"hljs-built_in\">Boolean</span>.to_js_boolean</span>)\n                 onChange=(<span class=\"hljs-params\">update(<span class=\"hljs-params\">MyForm.Email</span>)</span>)\n                 onBlur=(<span class=\"hljs-params\">blur(<span class=\"hljs-params\">MyForm.Email</span>)</span>)\n               />\n               (<span class=\"hljs-params\">\n                 <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-params\">MyForm.Email |> results</span>) {\n                 | Some(<span class=\"hljs-params\">Formality.Valid(<span class=\"hljs-params\">valid</span>)</span>) =>\n                   &#x3C;div className=(<span class=\"hljs-params\">Cn.make(<span class=\"hljs-params\">[\"form-message\", valid ? \"success\" : \"failure\"]</span>)</span>)>\n                     (<span class=\"hljs-params\">(<span class=\"hljs-params\">valid ? \"Nice!\" : \"Uh oh error\"</span>) |> ReasonReact.stringToElement</span>)\n                   &#x3C;/div>\n                 | None => ReasonReact.nullElement\n                 }\n               </span>)\n               &#x3C;input\n                 value=state.password\n                 disabled=(<span class=\"hljs-params\">submitting |> Js.<span class=\"hljs-built_in\">Boolean</span>.to_js_boolean</span>)\n                 onChange=(<span class=\"hljs-params\">update(<span class=\"hljs-params\">MyForm.Password</span>)</span>)\n                 onBlur=(<span class=\"hljs-params\">blur(<span class=\"hljs-params\">MyForm.Password</span>)</span>)\n               />\n               (<span class=\"hljs-params\">\n                 <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-params\">MyForm.Password |> results</span>) {\n                 | Some(<span class=\"hljs-params\">Formality.Valid(<span class=\"hljs-params\">valid</span>)</span>) =>\n                   &#x3C;div className=(<span class=\"hljs-params\">Cn.make(<span class=\"hljs-params\">[\"form-message\", valid ? \"success\" : \"failure\"]</span>)</span>)>\n                     (<span class=\"hljs-params\">(<span class=\"hljs-params\">valid ? \"Nice!\" : \"Uh oh error\"</span>) |> ReasonReact.stringToElement</span>)\n                   &#x3C;/div>\n                 | None => ReasonReact.nullElement\n                 }\n               </span>)\n               &#x3C;button disabled=(<span class=\"hljs-params\">submitting |> Js.<span class=\"hljs-built_in\">Boolean</span>.to_js_boolean</span>)>\n                 (<span class=\"hljs-params\">(<span class=\"hljs-params\">submitting ? \"Submitting...\" : \"Submit\"</span>) |> ReasonReact.stringToElement</span>)\n               &#x3C;/button>\n             &#x3C;/form>\n         </span>)\n    &#x3C;/<span class=\"hljs-params\">Container</span>>\n};</span></code></pre>"}