{"filename":"reason-apollo.json","type":"published","id":"reason-apollo","name":"reason-apollo","version":"0.5.7","description":"Using Apollo client 2 with Reason","author":"Gr√©goire Van der Auwermeulen","license":"MIT","keywords":["react","graphql","reason","apollo"],"analyzed":"2017-12-19T22:45:06.498Z","updated":"2017-12-19T22:45:06.498Z","stars":48,"score":0.5087903396211474,"quality":0.41167083833848434,"popularity":0.10082596605600598,"maintenance":1,"homepageUrl":"https://github.com/apollographql/reason-apollo#readme","repositoryUrl":"https://github.com/apollographql/reason-apollo","npmUrl":"https://www.npmjs.com/package/reason-apollo","issuesUrl":"https://github.com/apollographql/reason-apollo/issues","docsUrl":null,"path":"packages/reason-apollo","body":"<h1 id=\"reason-apollo\"><a aria-hidden=\"true\" href=\"#reason-apollo\"><span class=\"icon icon-link\"></span></a>Reason-apollo</h1>\n<p><a href=\"https://badge.fury.io/js/reason-apollo\"><img src=\"https://badge.fury.io/js/reason-apollo.svg\" alt=\"npm version\"></a>\n<a href=\"http://www.apollostack.com/#slack\"><img src=\"https://img.shields.io/badge/slack-join-orange.svg\" alt=\"Get on Slack\"></a></p>\n<p>Easily use the Apollo Client 2 with Reason</p>\n<h2 id=\"install-and-setup\"><a aria-hidden=\"true\" href=\"#install-and-setup\"><span class=\"icon icon-link\"></span></a>Install and setup</h2>\n<h4 id=\"yarn\"><a aria-hidden=\"true\" href=\"#yarn\"><span class=\"icon icon-link\"></span></a>yarn</h4>\n<pre><code>yarn add reason-apollo\n</code></pre>\n<h4 id=\"bsconfig\"><a aria-hidden=\"true\" href=\"#bsconfig\"><span class=\"icon icon-link\"></span></a>bsconfig</h4>\n<p>Add <code>reason-apollo</code> to your <code>bs-dependencies</code>:\n<strong>bsconfig.json</strong></p>\n<pre><code>\"bs-dependencies\": [\n  \"reason-react\",\n  \"reason-apollo\"\n]\n</code></pre>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<p> <a href=\"https://github.com/Gregoirevda/reason-apollo-test-usage\">here</a> is a repository showing the usage of the package.</p>\n<h3 id=\"create-the-apollo-client\"><a aria-hidden=\"true\" href=\"#create-the-apollo-client\"><span class=\"icon icon-link\"></span></a>Create the Apollo Client</h3>\n<p> <strong>Apollo.re</strong></p>\n<pre><code class=\"hljs language-reason\">module<span class=\"hljs-built_in\"> Client </span>= ReasonApollo.Create({ let uri = <span class=\"hljs-string\">\"http://localhost:3010/graphql\"</span> });</code></pre>\n<h2 id=\"query\"><a aria-hidden=\"true\" href=\"#query\"><span class=\"icon icon-link\"></span></a>Query</h2>\n<h3 id=\"query-configuration\"><a aria-hidden=\"true\" href=\"#query-configuration\"><span class=\"icon icon-link\"></span></a>Query Configuration</h3>\n<p>  <strong>QueryConfig.re</strong></p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* Create a query with the `graphql-tag` */</span>\n\n<span class=\"hljs-keyword\">let</span> query = [@bs] gql({|\n  query getUser {\n    name\n  }\n|});  \n\n<span class=\"hljs-comment\">/* Describe the result type */</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">user</span></span> = {. <span class=\"hljs-string\">\"name\"</span>: string};\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">data</span></span> = {. <span class=\"hljs-string\">\"user\"</span>: user};\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">response</span></span> = data;\n  \n<span class=\"hljs-comment\">/* Optional variables passed to the query */</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">variables</span></span> = {. <span class=\"hljs-string\">\"limit\"</span>: int}; <span class=\"hljs-comment\">/* or `type variables;` if none */</span></code></pre>\n<h4 id=\"executing-the-query\"><a aria-hidden=\"true\" href=\"#executing-the-query\"><span class=\"icon icon-link\"></span></a>Executing the Query</h4>\n<p>  <strong>YourQuery.re</strong></p>\n<pre><code class=\"hljs language-reason\">module FetchUserName = Apollo.Client.Query(QueryConfig);\n\nlet <span class=\"hljs-keyword\">variables</span> = {\n  <span class=\"hljs-string\">\"limit\"</span>: 2\n};\n\nlet make = (_children) => {\n<span class=\"hljs-comment\">/* ... */</span>\nrender: (_) =>\n  &#x3C;FetchUserName <span class=\"hljs-keyword\">variables</span>>\n    (response <span class=\"hljs-comment\">=> {</span>\n      switch <span class=\"hljs-comment\">response {</span>\n         | Loading <span class=\"hljs-comment\">=> &#x3C;div> (Utils.ste(</span><span class=\"hljs-comment\">\"Loading\"</span><span class=\"hljs-comment\">)) &#x3C;</span>/<span class=\"hljs-built-in\">div</span>>\n         | Failed(error) => &#x3C;<span class=\"hljs-built-in\">div</span>> (Utils.ste(error)) &#x3C;/<span class=\"hljs-comment\">div></span>\n         | Loaded(result) <span class=\"hljs-comment\">=> &#x3C;div> (Utils.ste(result##user##name)) &#x3C;</span>/<span class=\"hljs-built-in\">div</span>>\n    })\n  &#x3C;/<span class=\"hljs-comment\">FetchUserName></span>\n}</code></pre>\n<h2 id=\"mutation\"><a aria-hidden=\"true\" href=\"#mutation\"><span class=\"icon icon-link\"></span></a>Mutation</h2>\n<h3 id=\"mutation-configuration\"><a aria-hidden=\"true\" href=\"#mutation-configuration\"><span class=\"icon icon-link\"></span></a>Mutation Configuration</h3>\n<p>  <strong>MutationConfig.re</strong></p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* Create a mutation with the `graphql-tag` */</span>\n\n<span class=\"hljs-keyword\">let</span> mutation = [@bs] gql({|\n  mutation deleteTodo($id: ID!) {\n      deleteTodo(id: $id) {\n        id\n        name\n      }\n    }\n|});  \n\n<span class=\"hljs-comment\">/* Describe the result type */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">todo</span></span> = {. <span class=\"hljs-string\">\"name\"</span>: string, <span class=\"hljs-string\">\"id\"</span>: string};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">data</span></span> = {. <span class=\"hljs-string\">\"deleteTodo\"</span>: todo};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">response</span></span> = data;\n  \n<span class=\"hljs-comment\">/* Optional variables passed to the mutation */</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">variables</span></span> = {. <span class=\"hljs-string\">\"id\"</span>: string}; <span class=\"hljs-comment\">/* or `type variables;` if none */</span></code></pre>\n<h3 id=\"executing-the-mutation\"><a aria-hidden=\"true\" href=\"#executing-the-mutation\"><span class=\"icon icon-link\"></span></a>Executing the Mutation</h3>\n<p>  <strong>YourMutation.re</strong></p>\n<pre><code class=\"hljs language-reason\">module DeleteTodo = Apollo.Client.Mutation(MutationConfig);\n\nlet variables = {\n  <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"uuid-1\"</span>\n};\n\nlet make = (_children) => {\n<span class=\"hljs-comment\">/* ... */</span>\n<span class=\"hljs-symbol\">render:</span> (_) =>\n  <span class=\"hljs-params\">&#x3C;DeleteTodo></span>\n    ((\n      deleteTodo <span class=\"hljs-comment\">/* Mutation to call */</span>, \n      result <span class=\"hljs-comment\">/* Result of your mutation */</span>\n    ) => {\n        let mutationResponse = switch <span class=\"hljs-class\">result </span>{\n          | NotCalled => <span class=\"hljs-params\">&#x3C;div></span>  (Utils.ste(<span class=\"hljs-string\">\"Not Called\"</span>)) <span class=\"hljs-params\">&#x3C;/div></span>\n          | Loading => <span class=\"hljs-params\">&#x3C;div></span> (Utils.ste(<span class=\"hljs-string\">\"Loading\"</span>)) <span class=\"hljs-params\">&#x3C;/div></span>\n          | Loaded(response) => <span class=\"hljs-params\">&#x3C;div></span> (Utils.ste(response<span class=\"hljs-meta\">##deleteTodo##name ++ <span class=\"hljs-string\">\" deleted\"</span>)) &#x3C;/div></span>\n          | Failed(error) => <span class=\"hljs-params\">&#x3C;div></span> (Utils.ste(error)) <span class=\"hljs-params\">&#x3C;/div></span>\n        };\n      <span class=\"hljs-params\">&#x3C;div></span>\n        <span class=\"hljs-params\">&#x3C;button onClick=((_mouseEvent) =></span> deleteTodo(~variables, ()))> \n          (Utils.ste(<span class=\"hljs-string\">\"Delete Todo\"</span>)) \n        <span class=\"hljs-params\">&#x3C;/button></span>\n        <span class=\"hljs-params\">&#x3C;div></span> (mutationResponse) <span class=\"hljs-params\">&#x3C;/div></span>\n      <span class=\"hljs-params\">&#x3C;/div></span>\n    })\n  <span class=\"hljs-params\">&#x3C;/DeleteTodo></span>\n}</code></pre>"}