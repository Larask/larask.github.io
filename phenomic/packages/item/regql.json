{"filename":"regql.json","type":"published","id":"regql","name":"regql","version":"0.3.1","description":"reason graphql","author":"Kennet Postigo","license":"MIT","keywords":[],"analyzed":"2017-12-21T23:14:37.677Z","updated":"2017-12-21T23:14:37.677Z","stars":11,"score":0.520511987579923,"quality":0.5063960782201744,"popularity":0.05364275519063419,"maintenance":0.9994805708489964,"homepageUrl":"https://github.com/kennetpostigo/regql#readme","repositoryUrl":"https://github.com/kennetpostigo/regql","npmUrl":"https://www.npmjs.com/package/regql","issuesUrl":"https://github.com/kennetpostigo/regql/issues","docsUrl":null,"path":"packages/regql","body":"<h1 id=\"regql\"><a aria-hidden=\"true\" href=\"#regql\"><span class=\"icon icon-link\"></span></a>Regql</h1>\n<p><a href=\"http://npm.im/regql\"><img src=\"https://img.shields.io/npm/v/regql.svg?style=flat-square\" alt=\"version\"></a>\n<a href=\"http://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/npm/l/regql.svg?style=flat-square\" alt=\"MIT License\"></a></p>\n<p>GraphQL Client in Pure <a href=\"https://reasonml.github.io\">ReasonML</a>. Stupid simple,\nmagic-free client backed by plain-old fetch. Inspired by\n<a href=\"https://github.com/Gregoirevda/reason-apollo\">reason-apollo</a>.</p>\n<h2 id=\"roadmap\"><a aria-hidden=\"true\" href=\"#roadmap\"><span class=\"icon icon-link\"></span></a>RoadMap</h2>\n<p>In the near future these are the planned additional features:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> integration with <a href=\"https://github.com/mhallin/graphql_ppx\">graphql_ppx</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Cache queries/requests</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Optimistic Updates</li>\n</ul>\n<h2 id=\"install\"><a aria-hidden=\"true\" href=\"#install\"><span class=\"icon icon-link\"></span></a>Install</h2>\n<pre><code class=\"hljs language-bash\">yarn add regql</code></pre>\n<h2 id=\"bsconfig\"><a aria-hidden=\"true\" href=\"#bsconfig\"><span class=\"icon icon-link\"></span></a>bsconfig</h2>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"bs-dependencies\"</span>: [\n  <span class=\"hljs-string\">\"reason-react\"</span>,\n  <span class=\"hljs-string\">\"bs-fetch\"</span>,\n  <span class=\"hljs-string\">\"bs-json\"</span>,\n  <span class=\"hljs-string\">\"regql\"</span>\n]</code></pre>\n<h2 id=\"usage\"><a aria-hidden=\"true\" href=\"#usage\"><span class=\"icon icon-link\"></span></a>Usage</h2>\n<h4 id=\"instantiate-the-client-and-pass-it-configuration\"><a aria-hidden=\"true\" href=\"#instantiate-the-client-and-pass-it-configuration\"><span class=\"icon icon-link\"></span></a>Instantiate the client and pass it configuration:</h4>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">// Gql.re</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Client</span> =</span> Regql.Create({\n  <span class=\"hljs-built_in\">let</span> uri = <span class=\"hljs-string\">\"http://localhost:8000/graphql\"</span>\n});</code></pre>\n<h4 id=\"create-a-query\"><a aria-hidden=\"true\" href=\"#create-a-query\"><span class=\"icon icon-link\"></span></a>Create a query</h4>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> query = {|\n    query getUser {\n      name\n    }\n  |};</code></pre>\n<h4 id=\"define-the-response-shape\"><a aria-hidden=\"true\" href=\"#define-the-response-shape\"><span class=\"icon icon-link\"></span></a>Define the response shape</h4>\n<pre><code class=\"hljs language-reason\">type<span class=\"hljs-built_in\"> user </span>= {name: string};<span class=\"hljs-built_in\">\ntype </span>data = {user: user};</code></pre>\n<h4 id=\"define-decoder-for-your-response\"><a aria-hidden=\"true\" href=\"#define-decoder-for-your-response\"><span class=\"icon icon-link\"></span></a>Define Decoder for your response</h4>\n<pre><code class=\"hljs language-reason\">let<span class=\"hljs-built_in\"> user </span>= (json) =>\n  Json.Decode.{\n    name: json |> field(<span class=\"hljs-string\">\"name\"</span>, string),\n  };\n\nlet data = (json) =>\n  Json.Decode.{\n    user: json |> field(<span class=\"hljs-string\">\"user\"</span>, user)\n  };</code></pre>\n<h4 id=\"define-container-configuration\"><a aria-hidden=\"true\" href=\"#define-container-configuration\"><span class=\"icon icon-link\"></span></a>Define Container configuration</h4>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-type\">Container</span> = {\n  <span class=\"hljs-keyword\">type</span> shape = data;\n  <span class=\"hljs-keyword\">type</span> variables; /* <span class=\"hljs-keyword\">or</span> some <span class=\"hljs-keyword\">type</span> `<span class=\"hljs-keyword\">type</span> variables = {<span class=\"hljs-string\">\"one\"</span>: <span class=\"hljs-number\">1</span>};` <span class=\"hljs-keyword\">if</span> used */\n  <span class=\"hljs-keyword\">let</span> decoder = data;\n};</code></pre>\n<h3 id=\"pass-container-configuration-to-gqlclient\"><a aria-hidden=\"true\" href=\"#pass-container-configuration-to-gqlclient\"><span class=\"icon icon-link\"></span></a>Pass Container configuration to Gql.Client</h3>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">module</span> FetchUserName = Gql.<span class=\"hljs-built_in\">Client</span>(Container);</code></pre>\n<h3 id=\"use-the-fetchusername-component\"><a aria-hidden=\"true\" href=\"#use-the-fetchusername-component\"><span class=\"icon icon-link\"></span></a>Use the FetchUserName Component</h3>\n<pre><code class=\"hljs language-reason\">render: <span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =></span>\n&#x3C;FetchUserName query>\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">response</span>) => {\n    <span class=\"hljs-keyword\">switch</span> response {\n       | Loading => &#x3C;div> (<span class=\"hljs-params\">ReasonReact.stringToElement(<span class=\"hljs-params\">\"Loading\"</span>)</span>) &#x3C;/div>\n       | Failed(<span class=\"hljs-params\">error</span>) => &#x3C;div> (<span class=\"hljs-params\">ReasonReact.stringToElement(<span class=\"hljs-params\">error</span>)</span>) &#x3C;/div>\n       | Loaded(<span class=\"hljs-params\">result</span>) =>&#x3C;div> (<span class=\"hljs-params\">ReasonReact.stringToElement(<span class=\"hljs-params\">result.user.name</span>)</span>) &#x3C;/div>\n  }</span>)\n&#x3C;/<span class=\"hljs-params\">FetchUserName</span>></span></code></pre>"}