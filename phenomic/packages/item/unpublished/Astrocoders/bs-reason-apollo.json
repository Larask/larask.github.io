{"filename":"unpublished%2FAstrocoders%2Fbs-reason-apollo.json","type":"unpublished","id":"unpublished/Astrocoders/bs-reason-apollo","name":"Astrocoders/bs-reason-apollo","version":"1.0.0-beta.3","description":"Boilerplate for BuckleScript NPM package","author":"Gabriel R. Abreu <grsabreu@gmail.com>","license":"MIT","keywords":["react","graphql","bucklescript","reason","apollo"],"readme":"# bs-reason-apollo\n[![Build Status](https://travis-ci.org/Astrocoders/bs-reason-apollo.svg?branch=master)](https://travis-ci.org/Astrocoders/bs-reason-apollo)\n\nInitially inspired by https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re\nBut now with a more sugared usage with function as child.\n\n\n## Difference from reason-apollo official\nThis allows you to use a React Apollo Client that you already have in JS so you can gradually change to Reason.\nSetup the same way you would do for React Apollo and just plug it in.\n\n## Install\n\n```\nyarn add bs-reason-apollo\n```\n\nUpdate your bs-config.json\n```js\n  \"bs-dependencies\": [\"reason-react\", \"bs-reform\", \"bs-reason-apollo\"],\n```\n\n## ReactApollo.CreateWrapper\nAs you have your ApolloProvider somewhere in the top of your React JS tree you are already covered there.\nSo now to use it with Apollo create a query definition module for you query:\n\n```reason\n/* re/SignInQueryGql.re */\nopen BsReasonApollo;\n\nlet query = GraphQLTag.gql({|\n  query SignInQuery {\n    currentUser {\n      id\n      email\n    }\n  }\n|});\n\nmodule Types = {\n  type user = {. \"id\": string, \"email\": string};\n  type error = {. \"message\": string};\n  /* You must always have this data type with loading and error, it's what the HOC gives you */\n  type data = {\n    .\n    \"loading\": Js.boolean,\n    \"error\": Js.null_undefined(error),\n    /* Our response */\n    \"currentUser\": Js.null_undefined(user)\n  };\n};\n\ntype data = Types.data;\n\n/* Define any Js.t variables that you query need here, if you don't use just declare it */\ntype variables;\n\ntype response = Types.user;\n```\n\nNow in your actually component:\n\n```reason\nopen BsReasonApollo;\n\nmodule SignInQueryWrapper = ReactApollo.CreateWrapper(SignInQueryGql);\n\n...\nlet make = (_children) => {\n  ...,\n  render: (_self) =>\n    <SignInQueryWrapper>\n    ...((~data) =>\n        switch (\n          Js.to_bool(data##loading),\n          Js.Null_undefined.to_opt(data##error),\n          Js.Null_undefined.to_opt(data##currentUser)\n        ) {\n        | (true, _, _) => <FullLoading />\n        | (false, _, Some(user)) =>\n          <Welcome user />\n        | (false, Some(error), _) => <Whoops name=error##message />\n        | (false, None, _) =>\n          <KeyboardAwareScrollView>\n            <Wrapper>\n              <Header>\n                <Logo\n                  source=Image.(\n                           Required(Packager.require(\"../../../src/public/img/logo-calendar.png\"))\n                         )\n                />\n              </Header>\n              <ContentWrapper\n                contentContainerStyle=Style.(\n                                        style([\n                                          paddingVertical(Pt(40.)),\n                                          justifyContent(SpaceAround)\n                                        ])\n                                      )>\n                <SignInForm />\n              </ContentWrapper>\n            </Wrapper>\n          </KeyboardAwareScrollView>\n        }\n      )\n    </SignInQueryWrapper>\n}\n```\n\n## ReactApollo.CreateMutationWrapper\n\nDefine the mutation module:\n\n```reason\n/* re/SignInMutationGql.re */\nopen BsReasonApollo;\n\nlet query = GraphQLTag.gql({|\n  mutation SignInQuery($input: SignInInput!) {\n    signIn(input: $input) {\n      error\n      token\n    }\n  }\n|});\n\nmodule Types = {\n  type input = {. \"password\": string, \"email\": string};\n  type signIn = {. \"error\": Js.null_undefined(string), \"token\": Js.null_undefined(string)};\n};\n\n/* Needed for mutations, it'll be probably `variables` in the next release */\ntype input = Types.input;\n\n/* Mutation response */\ntype response = {. \"signIn\": Types.signIn};\n```\n\n```reason\nopen BsReasonApollo;\n\n/* Mutation wrapper */\nmodule SignInMutationWrapper = ReactApollo.CreateMutationWrapper(SignInQueryGql);\n\n/* https://github.com/Astrocoders/reform */\nmodule SignInForm = ReForm.Create(SignInFormParams);\n\nlet convertInputToJs: SignInFormParams.state => SignInMutationGql.Types.signInInput =\n  (values) => {\"password\": values.password, \"email\": values.email};\n\nlet handleSubmit = (mutate, values, setSubmitting) =>\n  values\n  |> convertToJs\n  |> mutate\n  |> Js.Promise.(\n       then_(\n         (payload) =>\n           (\n             switch (Js.Null_undefined.to_opt(payload##signIn##error)) {\n             | Some(error) =>\n               Alert.alert(~title=\"Something went wrong\", ~message=error, ());\n               setSubmitting(false)\n             | None =>\n               RouterActions.home(~actionType=`replace);\n               let _ =\n                 Utils.UserSession.setToken(\n                   Utils.get(Js.Null_undefined.to_opt(payload##signIn##token), \"\")\n                 );\n               ignore()\n             }\n           )\n           |> resolve\n       )\n     )\n  |> ignore;\n\n/* A little abstraction to make function as child composition hurt a bit less */\nlet enhanced = (mapper) => {\n  <SignInMutationWrapper>\n    ...((~mutate) => (\n      <SignInForm\n        initialValues={etc}\n         onSubmit=(\n           (values, ~setSubmitting, ~setError as _) =>\n             handleSubmit(mutate, values, setSubmitting)\n         )\n      >\n        ...mapper\n      </SignInForm>\n    ))\n  </SignInMutationWrapper>\n};\n\nlet component =\n```\n\n## Demo\nWIP\n","analyzed":"2017-12-24T16:47:08.123Z","updated":"2017-12-24T16:47:08.123Z","stars":11,"score":0,"quality":0,"popularity":0,"maintenance":0,"homepageUrl":"https://github.com/Astrocoders/bs-reason-apollo#readme","repositoryUrl":"https://github.com/Astrocoders/bs-reason-apollo","npmUrl":null,"issuesUrl":"https://github.com/Astrocoders/bs-reason-apollo/issues","docsUrl":null,"path":"packages/unpublished/Astrocoders/bs-reason-apollo"}