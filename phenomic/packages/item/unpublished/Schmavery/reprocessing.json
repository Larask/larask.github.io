{"filename":"unpublished%2FSchmavery%2Freprocessing.json","type":"unpublished","id":"unpublished/Schmavery/reprocessing","name":"Schmavery/reprocessing","version":"0.1.0","description":"Processing library for Reason","author":"bsansouci & schmavery","keywords":[],"readme":"# Reprocessing\n\nThis is a high-level drawing library, inspired by [Processing](https://processing.org), allowing you to write code that'll run on the web (using WebGL) and natively (using OpenGL).\n\n\n## Example\nThe [web environment](https://schmavery.github.io/reprocessing/) is the simplest way to try reprocessing. (It uses an older verison of the Reason syntax though, we're working on fixing that).\n\nThe 2nd simplest way to try is to clone [reprocessing-example](https://github.com/bsansouci/reprocessing-example).\n\nSee [below](#projects-using-reprocessing) for projects using Reprocessing!\n\n## Getting Started\n```bash\nnpm install schmavery/reprocessing\n```\n\n### Example\n```reason\nopen Reprocessing;\n\nlet setup = (env) => {\n  Env.size(~width=600, ~height=600, env);\n};\n\nlet draw = (_state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.fill(Constants.red, env);\n  Draw.rect(~pos=(150, 150), ~width=300, ~height=300, env)\n};\n\nrun(~setup, ~draw, ());\n```\n\n### Build\n```\nnpm run build:web\n```\n\nThis will draw a simple red square on a black background.  Compare this to [reglexampleproject](https://github.com/bsansouci/reasonglexampleproject/blob/simple/src/index.re), which takes 200+ lines to do the exact same thing.  This difference is even more notable on bigger projects.  Check out the code for a [draggable red square](https://github.com/Schmavery/reprocessing/blob/master/examples/redsquare.re).\n\n## Demo\nThere are a couple demos inside `examples`. Run `npm i` to install all deps and `npm run build` to build to JS (default). Open `index.html` in safari (or use `python -m SimpleHTTPServer 8000` to spawn a static server and go to `localhost:8000` in chrome).\n\nRun `npm run build:bytecode` to build to a bytecode executable and run `./lib/bs/bytecode/index.byte`.\n\nRun `npm run build:native` to build to a native executable and run `./lib/bs/native/index.native`.\n\nSee also https://github.com/Schmavery/FlappyBird for a slightly bigger example.\n\n\n# Some Differences from Processing\n- There is no magic - everything is proper Reason code.  This means that you have to call `Reprocessing.run` with the functions that you want to use.  You also have a couple of options about which utility modules to open.  See the `examples` directory for some different ways to do this.  It is recommended to `open Reprocessing` at the top, and then you can optionally open `Draw`, `Env` and `Utils` to make it look more like Processing code. Alternatively, they can be used directly, as can be seen above.\n\n- For state management, we encourage the use of the `state` value that Reprocessing manages for the user.  To use this, decide on a datatype representing the state and return the initial value from `setup`.  This will be persisted behind the scenes and passed to every callback (such as `draw` and `mouseDown`).  Each callback should return the new value of the state (or the old value if it doesn't change).\n\n- There are no built-in variables like `width` and `mouseX`.  Instead, these are functions that are called, passing in an environment object that is always provided.\n```reason\nlet draw = (state, env) => {\n  let w = Env.width(env);\n  print_endline(\"The current width is:\" ++ string_of_int(w))\n};\n```\n\n- The builtin `map` function is called `remap` instead to avoid confusion with the well-known `List.map` function which maps over a list of values. As, according to the Processing docs, this function \"Re-maps a number from one range to another.\", this naming seems appropriate.\n\n- Because of the limitations of Reason, several utility functions that would otherwise accept either an integer or a float now expose a version with an `f` suffix, which supports floats.  Ex: `random` vs `randomf`.\n\n- Points are expressed as tuples.  Instead of exposing a `mouseX` and `mouseY`, there is a `mouse`, which is a tuple of x and y values.\n```reason\nlet draw = (state, env) => {\n  let (x, y) = Env.mouse(env);\n  print_endline(\"The current mouse position is:\" ++ (string_of_int(x) ++ string_of_int(y)))\n};\n```\n\n\n# Using Fonts\nThe story for using fonts in your Reprocessing app is still under some development to make it nicer.  Right now we have support for writing text in a font defined in the [Angel Code font](http://www.angelcode.com/products/bmfont/) format. This is basically a bitmap of packed glyph textures along with a text file that describes it. The above link gives a few different tools that can be used to generate these files.  The assets folder of this repo also has an [example](https://github.com/Schmavery/reprocessing/tree/bsb-support-new/assets/font) of a font that can be copied to your project and used.  In order to use a font once you have the files:\n```\nlet font = Draw.loadFont(~filename, env);\nDraw.text(~font, ~body=\"Test!!!\", ~pos=(10, 10), env);\n```\n\n## Projects using Reprocessing\n\n- [Gravitron](https://github.com/jaredly/gravitron)\n- [Oh No! Zombies!](https://github.com/bsansouci/ludum-dare-40)\n- [2048](https://github.com/bsansouci/reprocessing-example/tree/2048)\n- [FlappyBird](https://github.com/bsansouci/reprocessing-example/tree/livestream-flappybird)\n- [Pong](https://github.com/illbexyz/repong)\n","analyzed":"2017-12-24T16:47:08.123Z","updated":"2017-12-24T16:47:08.123Z","stars":105,"score":0,"quality":0,"popularity":0,"maintenance":0,"repositoryUrl":"https://github.com/Schmavery/reprocessing","npmUrl":null,"docsUrl":null,"path":"packages/unpublished/Schmavery/reprocessing"}