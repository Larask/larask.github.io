{"filename":"unpublished%2Freasonml-community%2Fbs-socket.io.json","type":"unpublished","id":"unpublished/reasonml-community/bs-socket.io","name":"reasonml-community/bs-socket.io","version":"0.1.0","description":"socket.io in Reason","author":"Benjamin San Souci <benjamin.sansouci@gmail.com>","keywords":[],"readme":"bs-socket.io\n---\nSimple bindings to [socket.io](https://socket.io/).\n\nTo build everything run `npm run build` and to run the demo run `npm run run` and go to `localhost:3000` on two tabs. You can send messages back and forth!\n\n# Couple Gotchas\nThere are a couple differences between the JS API and this one.\n\n- There are no methods, just functions that take as first parameter the object on which they interact. ie: `socket.emit(\"bla\", 10)` is `Server.emit socket \"bla\" 10` in Reason.\n- `Server.Server` `Client.Client` and `Namespace.Namespace` are functors, meaning that they'll take a module that contains 2 things: a type called `t`, a function called `stringify`. This allows ocaml to typecheck the messages that you send back and forth between the server and the client. ie: you can only listen to / send messages that the server can listen to / send too.\n- `Server.emit` is different from `Server.Socket.emit`. The former emits to all connected peers while the latter emits to the given peer.\n- Instead of `io.sockets` there is `Namespace.default io` which does the same thing.\n- Instead of `io.of` there is `Namespace.of_ io` which does the same thing. (`of` is a Reason keyword)\n- All functions that are overloaded have different names depending on what you're passing. There's `Server.create` but also `Server.createWithHtpp` (see example) among others.\n","analyzed":"2017-12-24T16:47:08.122Z","updated":"2017-12-24T16:47:08.122Z","stars":4,"score":0,"quality":0,"popularity":0,"maintenance":0,"repositoryUrl":"https://github.com/reasonml-community/bs-socket.io","npmUrl":null,"docsUrl":null,"path":"packages/unpublished/reasonml-community/bs-socket.io"}