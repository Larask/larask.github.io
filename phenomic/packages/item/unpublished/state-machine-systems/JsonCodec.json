{"filename":"unpublished%2Fstate-machine-systems%2FJsonCodec.json","type":"unpublished","id":"unpublished/state-machine-systems/JsonCodec","name":"state-machine-systems/JsonCodec","version":"0.1.0","description":"","license":"Apache-2.0","keywords":["json","bucklescript","reason"],"readme":"# JsonCodec\n\n## JSON combinator library for BuckleScript/Reason\n\nUsing the magic of [pickler combinators](https://www.microsoft.com/en-us/research/wp-content/uploads/2004/01/picklercombinators.pdf), this library allows you to parse and serialize JSON structures in a declarative way, free of boilerplate.\n\nHere's a little example:\n\n```reason\nlet json = {js|\n{\n    \"name\": \"Great Pyramid of Giza\",\n    \"lat\": 29.979175,\n    \"lon\": 31.134358,\n    \"height\": 146.5\n}\n|js};\n\n/* Define a codec for the above object type */\nlet codec =\n  JsonCodec.(\n    object4\n      (field \"name\" string) (field \"lat\" number) (field \"long\" number) (field \"height\" number)\n  );\n\n/* Decoding */\nlet () =\n  switch (JsonCodec.decodeJson codec json) {\n  | Js.Result.Ok (name, lat, lon, height) =>\n    Printf.printf \"name='%s' location=%f,%f height=%f\\n\" name lat lon height\n  | Js.Result.Error error => Printf.printf \"Decoding error: %s\" error\n  };\n\n/* Encoding */\nlet encoded = JsonCodec.encodeJson codec (\"Machu Picchu\", -13.163333, -72.545556, 2430.0);\n\nlet () = Printf.printf \"JSON: %s\\n\" encoded;\n```\n\n\n&copy; 2017 State Machine Systems Ltd. [Apache Licence, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)","analyzed":"2017-12-24T16:47:08.130Z","updated":"2017-12-24T16:47:08.130Z","stars":7,"score":0,"quality":0,"popularity":0,"maintenance":0,"repositoryUrl":"https://github.com/state-machine-systems/JsonCodec","npmUrl":null,"docsUrl":null,"path":"packages/unpublished/state-machine-systems/JsonCodec"}